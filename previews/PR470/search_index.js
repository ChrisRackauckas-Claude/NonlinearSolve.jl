var documenterSearchIndex = {"docs":
[{"location":"basics/nonlinear_solution/#solution","page":"Nonlinear Solutions","title":"Nonlinear Solutions","text":"","category":"section"},{"location":"basics/nonlinear_solution/","page":"Nonlinear Solutions","title":"Nonlinear Solutions","text":"SciMLBase.AbstractNonlinearSolution\nSciMLBase.NonlinearSolution","category":"page"},{"location":"basics/nonlinear_solution/#SciMLBase.AbstractNonlinearSolution","page":"Nonlinear Solutions","title":"SciMLBase.AbstractNonlinearSolution","text":"abstract type AbstractNonlinearSolution{T, N} <: SciMLBase.AbstractNoTimeSolution{T, N}\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_solution/#SciMLBase.NonlinearSolution","page":"Nonlinear Solutions","title":"SciMLBase.NonlinearSolution","text":"struct NonlinearSolution{T, N, uType, R, P, A, O, uType2, S, Tr} <: SciMLBase.AbstractNonlinearSolution{T, N}\n\nRepresentation of the solution to a nonlinear equation defined by a NonlinearProblem, or the steady state solution to a differential equation defined by a SteadyStateProblem.\n\nFields\n\nu: the representation of the nonlinear equation's solution.\nresid: the residual of the solution.\nprob: the original NonlinearProblem/SteadyStateProblem that was solved.\nalg: the algorithm type used by the solver.\noriginal: if the solver is wrapped from an alternative solver ecosystem, such as NLsolve.jl, then this is the original return from said solver library.\nretcode: the return code from the solver. Used to determine whether the solver solved successfully or whether it exited due to an error. For more details, see  the return code documentation.\nleft: if the solver is bracketing method, this is the final left bracket value.\nright: if the solver is bracketing method, this is the final right bracket value.\nstats: statistics of the solver, such as the number of function evaluations required.\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_solution/#Statistics","page":"Nonlinear Solutions","title":"Statistics","text":"","category":"section"},{"location":"basics/nonlinear_solution/","page":"Nonlinear Solutions","title":"Nonlinear Solutions","text":"SciMLBase.NLStats","category":"page"},{"location":"basics/nonlinear_solution/#SciMLBase.NLStats","page":"Nonlinear Solutions","title":"SciMLBase.NLStats","text":"mutable struct NLStats\n\nStatistics from the nonlinear equation solver about the solution process.\n\nFields\n\nnf: Number of function evaluations.\nnjacs: Number of Jacobians created during the solve.\nnfactors: Number of factorzations of the jacobian required for the solve.\nnsolve: Number of linear solves W\b required for the solve.\nnsteps: Total number of iterations for the nonlinear solver.\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_solution/#Return-Code","page":"Nonlinear Solutions","title":"Return Code","text":"","category":"section"},{"location":"basics/nonlinear_solution/","page":"Nonlinear Solutions","title":"Nonlinear Solutions","text":"ReturnCode.Success\nReturnCode.ConvergenceFailure\nReturnCode.Unstable\nReturnCode.MaxIters\nReturnCode.Failure\nReturnCode.InternalLineSearchFailed\nReturnCode.Stalled\nReturnCode.ShrinkThresholdExceeded","category":"page"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.Success","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.Success","text":"ReturnCode.Success\n\nThe success state of the solver. If this return code is given, then the solving process was successful, but no extra information about that success is given.\n\nCommon Reasons for Seeing this Return Code\n\nThis is the most common return code and most solvers will give this return code if the solving process went as expected without any errors or detected numerical issues.\n\nProperties\n\nsuccessful_retcode = true\n\n\n\n\n\n","category":"constant"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.ConvergenceFailure","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.ConvergenceFailure","text":"ReturnCode.ConvergenceFailure\n\nA failure exit state of the solver. If this return code is given, then the solving process was unsuccessful because internal nonlinear solver iterations failed to converge.\n\nCommon Reasons for Seeing this Return Code\n\nThe most common reason for seeing this return code is because an inappropriate nonlinear solver was chosen. If fixed point iteration is used on a stiff problem, it will be faster by avoiding the Jacobian but it will make a stiff ODE solver not stable for stiff problems!\nFor nonlinear solvers, this can occur if certain threshold was exceeded. For example, in approximate jacobian solvers like Broyden, Klement, etc. if the number of jacobian resets exceeds the threshold, then this return code is given.\n\nProperties\n\nsuccessful_retcode = false\n\n\n\n\n\n","category":"constant"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.Unstable","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.Unstable","text":"ReturnCode.Unstable\n\nA failure exit state of the solver. If this return code is given, then the solving process was unsuccessful and exited early because the unstable_check function, as given by the unstable_check common keyword argument (or its default), give a true at the current state.\n\nCommon Reasons for Seeing this Return Code\n\nThe most common reason for seeing this return code is because u contains a NaN or Inf value. The default unstable_check only checks for these values.\n\nProperties\n\nsuccessful_retcode = false\n\n\n\n\n\n","category":"constant"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.MaxIters","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.MaxIters","text":"ReturnCode.MaxIters\n\nA failure exit state of the solver. If this return code is given, then the solving process was unsuccessful and exited early because the solver's iterations hit the maxiters either set by default or by the user in the solve/init command.\n\nNote about Nonlinear Optimization\n\nIn nonlinear optimization, many solvers (such as OptimizationOptimisers.Adam) do not have an exit criteria other than iters == maxiters. In this case, the solvers will iterate until maxiters and exit with a Success return code, as that is a successful run of the solver and not considered to be an error state. Solves with early termination criteria, such as Optim.BFGS exiting when the gradient is sufficiently close to zero, will give ReturnCode.MaxIters on exits which require the maximum iteration.\n\nCommon Reasons for Seeing this Return Code\n\nThis commonly occurs in ODE solving if a non-stiff method (e.g. Tsit5) is used in an algorithm choice for a stiff ODE. It is recommended that in such cases, one tries a stiff ODE solver.\nThis commonly occurs in optimization and nonlinear solvers if the tolerance on solve to too low and cannot be achieved due to floating point error or the condition number of the solver matrix. Double check that the chosen tolerance is numerically possible.\n\nProperties\n\nsuccessful_retcode = false\n\n\n\n\n\n","category":"constant"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.Failure","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.Failure","text":"ReturnCode.Failure\n\nA failure exit state of the solver. If this return code is given, then the solving process was unsuccessful but no extra information is given.\n\nCommon Reasons for Seeing this Return Code\n\nThe most common reason for seeing this return code is because the solver is a wrapped solver (i.e. a Fortran code) which does not provide any extra information about its exit state. If this is from a Julia-based solver, please open an issue.\n\nProperties\n\nsuccessful_retcode = false\n\n\n\n\n\n","category":"constant"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.InternalLineSearchFailed","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.InternalLineSearchFailed","text":"ReturnCode.InternalLineSearchFailed\n\nInternal Line Search used by the algorithm has failed.\n\nProperties\n\nsuccessful_retcode = false\n\n\n\n\n\n","category":"constant"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.Stalled","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.Stalled","text":"ReturnCode.Stalled\n\nThe solution has stalled. This is only returned by algorithms for which stalling is a failure mode. Certain solvers like Nonlinear Least Squares solvers are considered successful if the solution has stalled, in those cases ReturnCode.Success is returned.\n\nProperties\n\nsuccessful_retcode = false\n\n\n\n\n\n","category":"constant"},{"location":"basics/nonlinear_solution/#SciMLBase.ReturnCode.ShrinkThresholdExceeded","page":"Nonlinear Solutions","title":"SciMLBase.ReturnCode.ShrinkThresholdExceeded","text":"ReturnCode.ShrinkThresholdExceeded\n\nThe trust region radius was shrunk more times than the provided threshold.\n\nProperties\n\nsuccessful_retcode = false\n\n\n\n\n\n","category":"constant"},{"location":"basics/faq/#Frequently-Asked-Questions","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"","category":"section"},{"location":"basics/faq/#How-is-the-performance-of-Julia's-NonlinearSolve.jl-vs-MATLAB's-fzero?","page":"Frequently Asked Questions","title":"How is the performance of Julia's NonlinearSolve.jl vs MATLAB's fzero?","text":"","category":"section"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"This is addressed in a Twitter thread with the author of the improved fzero. On the test example:","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using NonlinearSolve, BenchmarkTools\n\nconst N = 100_000;\nlevels = 1.5 .* rand(N);\nout = zeros(N);\nmyfun(x, lv) = x * sin(x) - lv\n\nfunction f(out, levels, u0)\n    for i in 1:N\n        out[i] = solve(\n            IntervalNonlinearProblem{false}(\n                IntervalNonlinearFunction{false}(myfun), u0, levels[i]),\n            Falsi()).u\n    end\nend\n\nfunction f2(out, levels, u0)\n    for i in 1:N\n        out[i] = solve(\n            NonlinearProblem{false}(NonlinearFunction{false}(myfun), u0, levels[i]),\n            SimpleNewtonRaphson()).u\n    end\nend\n\n@btime f(out, levels, (0.0, 2.0))\n@btime f2(out, levels, 1.0)","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"MATLAB 2022a achieves 1.66s. Try this code yourself: we receive 0.009 seconds, or a 184x speedup.","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"For more information on performance of SciML, see the SciMLBenchmarks.","category":"page"},{"location":"basics/faq/#The-solver-tried-to-set-a-Dual-Number-in-my-Vector-of-Floats.-How-do-I-fix-that?","page":"Frequently Asked Questions","title":"The solver tried to set a Dual Number in my Vector of Floats. How do I fix that?","text":"","category":"section"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"This is a common problem that occurs if the code was not written to be generic based on the input types. For example, consider this example taken from this issue","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using NonlinearSolve, Random\n\nfunction fff_incorrect(var, p)\n    v_true = [1.0, 0.1, 2.0, 0.5]\n    xx = [1.0, 2.0, 3.0, 4.0]\n    xx[1] = var[1] - v_true[1]\n    return var - v_true\nend\n\nv_true = [1.0, 0.1, 2.0, 0.5]\nv_init = v_true .+ randn!(similar(v_true)) * 0.1\n\nprob_oop = NonlinearLeastSquaresProblem{false}(fff_incorrect, v_init)\ntry\n    sol = solve(prob_oop, LevenbergMarquardt(); maxiters = 10000, abstol = 1e-8)\ncatch e\n    @error e\nend","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Essentially what happened was, NonlinearSolve checked that we can use ForwardDiff.jl to differentiate the function based on the input types. However, this function has xx = [1.0, 2.0, 3.0, 4.0] followed by a xx[1] = var[1] - v_true[1] where var might be a Dual number. This causes the error. To fix it:","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Specify the autodiff to be AutoFiniteDiff","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"sol = solve(prob_oop, LevenbergMarquardt(; autodiff = AutoFiniteDiff());\n    maxiters = 10000, abstol = 1e-8)","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"This worked but, Finite Differencing is not the recommended approach in any scenario.","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Rewrite the function to use PreallocationTools.jl or write it as","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"function fff_correct(var, p)\n    v_true = [1.0, 0.1, 2.0, 0.5]\n    xx = eltype(var)[1.0, 2.0, 3.0, 4.0]\n    xx[1] = var[1] - v_true[1]\n    return xx - v_true\nend\n\nprob_oop = NonlinearLeastSquaresProblem{false}(fff_correct, v_init)\nsol = solve(prob_oop, LevenbergMarquardt(); maxiters = 10000, abstol = 1e-8)","category":"page"},{"location":"basics/faq/#I-thought-NonlinearSolve.jl-was-type-stable-and-fast.-But-it-isn't,-why?","page":"Frequently Asked Questions","title":"I thought NonlinearSolve.jl was type-stable and fast. But it isn't, why?","text":"","category":"section"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"It is hard to say why your code is not fast. Take a look at the Diagnostics API to pin-point the problem. One common issue is that there is type instability.","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"If you are using the defaults for the autodiff and your problem is not a scalar or using static arrays, ForwardDiff will create type unstable code. See this simple example:","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using NonlinearSolve, InteractiveUtils\n\nf(u, p) = @. u^2 - p\n\nprob = NonlinearProblem{false}(f, 1.0, 2.0)\n\n@code_warntype solve(prob, NewtonRaphson())\nnothing # hide","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Notice that this was type-stable, since it is a scalar problem. Now what happens for static arrays","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"using StaticArrays\n\nprob = NonlinearProblem{false}(f, @SVector([1.0, 2.0]), 2.0)\n\n@code_warntype solve(prob, NewtonRaphson())\nnothing # hide","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Again Type-Stable! Now let's try using a regular array:","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"prob = NonlinearProblem(f, [1.0, 2.0], 2.0)\n\n@code_warntype solve(prob, NewtonRaphson())\nnothing # hide","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"Oh no! This is type unstable. This is because ForwardDiff.jl will chunk the jacobian computation and the type of this chunksize can't be statically inferred. To fix this, we directly specify the chunksize:","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"@code_warntype solve(prob,\n    NewtonRaphson(;\n        autodiff = AutoForwardDiff(; chunksize = NonlinearSolve.pickchunksize(prob.u0))))\nnothing # hide","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"And boom! Type stable again. We always recommend picking the chunksize via NonlinearSolve.pickchunksize, however, if you manually specify the chunksize, it must be ≤ length of input. However, a very large chunksize can lead to excessive compilation times and slowdown.","category":"page"},{"location":"basics/faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"NonlinearSolve.pickchunksize","category":"page"},{"location":"basics/faq/#NonlinearSolve.pickchunksize","page":"Frequently Asked Questions","title":"NonlinearSolve.pickchunksize","text":"pickchunksize(x) = pickchunksize(length(x))\npickchunksize(x::Int)\n\nDetermine the chunk size for ForwardDiff and PolyesterForwardDiff based on the input length.\n\n\n\n\n\n","category":"function"},{"location":"native/steadystatediffeq/#SteadyStateDiffEq.jl","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.jl","text":"","category":"section"},{"location":"native/steadystatediffeq/","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.jl","text":"This is a wrapper package for using ODE solvers from DifferentialEquations.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"native/steadystatediffeq/","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.jl","text":"using Pkg\nPkg.add(\"SteadyStateDiffEq\")\nusing SteadyStateDiffEq","category":"page"},{"location":"native/steadystatediffeq/","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.jl","text":"These methods can be used independently of the rest of NonlinearSolve.jl","category":"page"},{"location":"native/steadystatediffeq/","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.jl","text":"Pages = [\"steadystatediffeq.md\"]","category":"page"},{"location":"native/steadystatediffeq/#Solver-API","page":"SteadyStateDiffEq.jl","title":"Solver API","text":"","category":"section"},{"location":"native/steadystatediffeq/","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.jl","text":"DynamicSS\nSSRootfind","category":"page"},{"location":"native/steadystatediffeq/#SteadyStateDiffEq.DynamicSS","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.DynamicSS","text":"DynamicSS(alg = nothing; tspan = Inf)\n\nRequires that an ODE algorithm is given as the first argument.  The absolute and relative tolerances specify the termination conditions on the derivative's closeness to zero.  This internally uses the TerminateSteadyState callback from the Callback Library. The simulated time for which given ODE is solved can be limited by tspan.  If tspan is a number, it is equivalent to passing (zero(tspan), tspan).\n\nExample usage:\n\nusing SteadyStateDiffEq, OrdinaryDiffEq\nsol = solve(prob, DynamicSS(Tsit5()))\n\nusing Sundials\nsol = solve(prob, DynamicSS(CVODE_BDF()); dt = 1.0)\n\nnote: Note\nThe default alg of nothing works only if DifferentialEquations.jl is installed and loaded.\n\nnote: Note\nIf you use CVODE_BDF you may need to give a starting dt via dt = .....*\n\n\n\n\n\n","category":"type"},{"location":"native/steadystatediffeq/#SteadyStateDiffEq.SSRootfind","page":"SteadyStateDiffEq.jl","title":"SteadyStateDiffEq.SSRootfind","text":"SSRootfind(alg = nothing)\n\nUse a Nonlinear Solver to find the steady state. Requires that a nonlinear solver is given as the first argument.\n\nnote: Note\nThe default alg of nothing works only if NonlinearSolve.jl is installed and loaded.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/operators/#Custom-SciML-Operators","page":"Custom SciML Operators","title":"Custom SciML Operators","text":"","category":"section"},{"location":"devdocs/operators/#Abstract-Operators","page":"Custom SciML Operators","title":"Abstract Operators","text":"","category":"section"},{"location":"devdocs/operators/","page":"Custom SciML Operators","title":"Custom SciML Operators","text":"NonlinearSolve.AbstractNonlinearSolveOperator","category":"page"},{"location":"devdocs/operators/#NonlinearSolve.AbstractNonlinearSolveOperator","page":"Custom SciML Operators","title":"NonlinearSolve.AbstractNonlinearSolveOperator","text":"AbstractNonlinearSolveOperator <: AbstractSciMLOperator\n\nNonlinearSolve.jl houses a few custom operators. These will eventually be moved out but till then this serves as the abstract type for them.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/operators/#Low-Rank-Jacobian-Operators","page":"Custom SciML Operators","title":"Low-Rank Jacobian Operators","text":"","category":"section"},{"location":"devdocs/operators/","page":"Custom SciML Operators","title":"Custom SciML Operators","text":"NonlinearSolve.BroydenLowRankJacobian","category":"page"},{"location":"devdocs/operators/#NonlinearSolve.BroydenLowRankJacobian","page":"Custom SciML Operators","title":"NonlinearSolve.BroydenLowRankJacobian","text":"BroydenLowRankJacobian{T}(U, Vᵀ, idx, cache, alpha)\n\nLow Rank Approximation of the Jacobian Matrix. Currently only used for LimitedMemoryBroyden. This computes the Jacobian as U times V^T.\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_problem/#problems","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"","category":"section"},{"location":"basics/nonlinear_problem/#The-Four-Types-of-Nonlinear-Problems","page":"Nonlinear Problems","title":"The Four Types of Nonlinear Problems","text":"","category":"section"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"NonlinearSolve.jl tackles four related types of nonlinear systems:","category":"page"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"Interval rootfinding problems. I.e., find the t in t_0 t_f such that f(t) = 0.\nSystems of nonlinear equations, i.e., find the u such that f(u) = 0.\nSteady state problems, i.e., find the u such that u = f(ut) has reached steady state, i.e., 0 = f(u ).\nThe nonlinear least squares problem, which is an under/over-constrained nonlinear system which might not be satisfiable, i.e. there may be no u such that f(u) = 0, and thus we find the u which minimizes ||f(u)|| in the least squares sense.","category":"page"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"The first is for solving scalar rootfinding problems, i.e., finding a single number, and requires that a bracketing interval is known. For a bracketing interval, one must have that the sign of f(t_0) is opposite the sign of f(t_f), thus guaranteeing a root in the interval.","category":"page"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"note: Note\nInterval rootfinding problems allow for f to return an array, in which case the interval rootfinding problem is interpreted as finding the first t such that any of the components of the array hit zero.","category":"page"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"The second type of nonlinear system can be multidimensional, and thus no ordering nor boundaries are assumed to be known. For a system of nonlinear equations, f can return an array, and the solver seeks the value of u for which all outputs of f are simultaneously zero.","category":"page"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"The last type if equivalent to a nonlinear system, but with the extra interpretation of having a potentially preferred unique root. That is, when there are multiple u such that f(u) = 0, the NonlinearProblem does not have a preferred solution, while for the SteadyStateProblem the preferred solution is the u(∞) that would arise from solving the ODE u' = f(u,t).","category":"page"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"warning: Warning\nMost solvers for SteadyStateProblem do not guarantee the preferred solution and instead will solve for some u in the set of solutions. The documentation of the nonlinear solvers will note if they return the preferred solution.","category":"page"},{"location":"basics/nonlinear_problem/#Problem-Construction-Details","page":"Nonlinear Problems","title":"Problem Construction Details","text":"","category":"section"},{"location":"basics/nonlinear_problem/","page":"Nonlinear Problems","title":"Nonlinear Problems","text":"IntervalNonlinearProblem\nNonlinearProblem\nSteadyStateProblem\nNonlinearLeastSquaresProblem","category":"page"},{"location":"basics/nonlinear_problem/#SciMLBase.IntervalNonlinearProblem","page":"Nonlinear Problems","title":"SciMLBase.IntervalNonlinearProblem","text":"Defines an interval nonlinear system problem. Documentation Page: https://docs.sciml.ai/NonlinearSolve/stable/basics/nonlinear_problem/\n\nMathematical Specification of an Interval Nonlinear Problem\n\nTo define a Nonlinear Problem, you simply need to give the function f which defines the nonlinear system:\n\nf(tp) = u = 0\n\nalong with an interval tspan, t in t_0t_f, within which the root should be found. f should be specified as f(t,p) (or in-place as f(u,t,p)), and tspan should be a Tuple{T,T} where T <: Number.\n\nnote: Note\nThe output value u is not required to be a scalar. When u is an AbstractArray, the problem is a simultaneous interval nonlinear problem where the solvers are made to give the first t for which any of the u hit zero. Currently, none of the solvers support this mode.\n\nProblem Type\n\nConstructors\n\nIntervalNonlinearProblem(f::NonlinearFunction, tspan, p = NullParameters(); kwargs...)\nIntervalNonlinearProblem{isinplace}(f, tspan, p = NullParameters(); kwargs...)\n\nisinplace optionally sets whether the function is in-place or not. This is determined automatically, but not inferred.\n\nParameters are optional, and if not given, then a NullParameters() singleton will be used, which will throw nice errors if you try to index non-existent parameters. Any extra keyword arguments are passed on to the solvers. For example, if you set a callback in the problem, then that callback will be added in every solve call.\n\nFields\n\nf: The function in the problem.\ntspan: The interval in which the root is to be found.\np: The parameters for the problem. Defaults to NullParameters.\nkwargs: The keyword arguments passed on to the solvers.\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_problem/#SciMLBase.NonlinearProblem","page":"Nonlinear Problems","title":"SciMLBase.NonlinearProblem","text":"Defines a nonlinear system problem. Documentation Page: https://docs.sciml.ai/NonlinearSolve/stable/basics/nonlinear_problem/\n\nMathematical Specification of a Nonlinear Problem\n\nTo define a Nonlinear Problem, you simply need to give the function f which defines the nonlinear system:\n\nf(up) = 0\n\nand an initial guess u₀ of where f(u, p) = 0. f should be specified as f(u, p) (or in-place as f(du, u, p)), and u₀ should be an AbstractArray (or number) whose geometry matches the desired geometry of u. Note that we are not limited to numbers or vectors for u₀; one is allowed to provide u₀ as arbitrary matrices / higher-dimension tensors as well.\n\nProblem Type\n\nConstructors\n\nNonlinearProblem(f::NonlinearFunction, u0, p = NullParameters(); kwargs...)\nNonlinearProblem{isinplace}(f, u0, p = NullParameters(); kwargs...)\n\nisinplace optionally sets whether the function is in-place or not. This is determined automatically, but not inferred.\n\nParameters are optional, and if not given, then a NullParameters() singleton will be used, which will throw nice errors if you try to index non-existent parameters. Any extra keyword arguments are passed on to the solvers. For example, if you set a callback in the problem, then that callback will be added in every solve call.\n\nFor specifying Jacobians and mass matrices, see the NonlinearFunctions page.\n\nFields\n\nf: The function in the problem.\nu0: The initial guess for the root.\np: The parameters for the problem. Defaults to NullParameters.\nkwargs: The keyword arguments passed on to the solvers.\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_problem/#SciMLBase.SteadyStateProblem","page":"Nonlinear Problems","title":"SciMLBase.SteadyStateProblem","text":"Defines a steady state ODE problem. Documentation Page: https://docs.sciml.ai/DiffEqDocs/stable/types/steadystatetypes/\n\nMathematical Specification of a Steady State Problem\n\nTo define a Steady State Problem, you simply need to give the function f which defines the ODE:\n\nfracdudt = f(u p t)\n\nand an initial guess u_0 of where f(u, p, t) = 0. f should be specified as f(u, p, t) (or in-place as f(du, u, p, t)), and u₀ should be an AbstractArray (or number) whose geometry matches the desired geometry of u. Note that we are not limited to numbers or vectors for u₀; one is allowed to provide u₀ as arbitrary matrices / higher dimension tensors as well.\n\nNote that for the steady-state to be defined, we must have that f is autonomous, that is f is independent of t. But the form which matches the standard ODE solver should still be used. The steady state solvers interpret the f by fixing t = infty.\n\nProblem Type\n\nConstructors\n\nSteadyStateProblem(f::ODEFunction, u0, p = NullParameters(); kwargs...)\nSteadyStateProblem{isinplace, specialize}(f, u0, p = NullParameters(); kwargs...)\n\nisinplace optionally sets whether the function is inplace or not. This is determined automatically, but not inferred. specialize optionally controls the specialization level. See the specialization levels section of the SciMLBase documentation for more details. The default is AutoSpecialize.\n\nParameters are optional, and if not given, a NullParameters() singleton will be used, which will throw nice errors if you try to index non-existent parameters. Any extra keyword arguments are passed on to the solvers. For example, if you set a callback in the problem, then that callback will be added in every solve call.\n\nAdditionally, the constructor from ODEProblems is provided:\n\nSteadyStateProblem(prob::ODEProblem)\n\nParameters are optional, and if not given, a NullParameters() singleton will be used, which will throw nice errors if you try to index non-existent parameters. Any extra keyword arguments are passed on to the solvers. For example, if you set a callback in the problem, then that callback will be added in every solve call.\n\nFor specifying Jacobians and mass matrices, see the DiffEqFunctions page.\n\nFields\n\nf: The function in the ODE.\nu0: The initial guess for the steady state.\np: The parameters for the problem. Defaults to NullParameters\nkwargs: The keyword arguments passed onto the solves.\n\nSpecial Solution Fields\n\nThe SteadyStateSolution type is different from the other DiffEq solutions because it does not have temporal information.\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_problem/#SciMLBase.NonlinearLeastSquaresProblem","page":"Nonlinear Problems","title":"SciMLBase.NonlinearLeastSquaresProblem","text":"Defines a nonlinear least squares problem.\n\nMathematical Specification of a Nonlinear Least Squares Problem\n\nTo define a Nonlinear Problem, you simply need to give the function f which defines the nonlinear system:\n\nundersetxmin  f(x p) \n\nand an initial guess u_0 for the minimization problem. f should be specified as f(u p) (or in-place as f(du u p)), and u_0 should be an AbstractArray (or number) whose geometry matches the desired geometry of u. Note that we are not limited to numbers or vectors for u_0; one is allowed to provide u_0 as arbitrary matrices / higher-dimension tensors as well.\n\nProblem Type\n\nConstructors\n\nNonlinearLeastSquaresProblem(f::NonlinearFunction, u0, p = NullParameters(); kwargs...)\nNonlinearLeastSquaresProblem{isinplace}(f, u0, p = NullParameters(); kwargs...)\n\nisinplace optionally sets whether the function is in-place or not. This is determined automatically, but not inferred.\n\nParameters are optional, and if not given, then a NullParameters() singleton will be used, which will throw nice errors if you try to index non-existent parameters.\n\nFor specifying Jacobians and mass matrices, see the NonlinearFunctions page.\n\nFields\n\nf: The function in the problem.\nu0: The initial guess for the solution.\np: The parameters for the problem. Defaults to NullParameters.\nkwargs: The keyword arguments passed on to the solvers.\n\n\n\n\n\n","category":"type"},{"location":"api/fixedpointacceleration/#FixedPointAcceleration.jl","page":"FixedPointAcceleration.jl","title":"FixedPointAcceleration.jl","text":"","category":"section"},{"location":"api/fixedpointacceleration/","page":"FixedPointAcceleration.jl","title":"FixedPointAcceleration.jl","text":"This is a extension for importing solvers from FixedPointAcceleration.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/fixedpointacceleration/","page":"FixedPointAcceleration.jl","title":"FixedPointAcceleration.jl","text":"using Pkg\nPkg.add(\"FixedPointAcceleration\")\nusing FixedPointAcceleration, NonlinearSolve","category":"page"},{"location":"api/fixedpointacceleration/#Solver-API","page":"FixedPointAcceleration.jl","title":"Solver API","text":"","category":"section"},{"location":"api/fixedpointacceleration/","page":"FixedPointAcceleration.jl","title":"FixedPointAcceleration.jl","text":"FixedPointAccelerationJL","category":"page"},{"location":"api/fixedpointacceleration/#NonlinearSolve.FixedPointAccelerationJL","page":"FixedPointAcceleration.jl","title":"NonlinearSolve.FixedPointAccelerationJL","text":"FixedPointAccelerationJL(; algorithm = :Anderson, m = missing,\n    condition_number_threshold = missing, extrapolation_period = missing,\n    replace_invalids = :NoAction)\n\nWrapper over FixedPointAcceleration.jl for solving Fixed Point Problems. We allow using this algorithm to solve root finding problems as well.\n\nKeyword Arguments\n\nalgorithm: The algorithm to use. Can be :Anderson, :MPE, :RRE, :VEA, :SEA, :Simple, :Aitken or :Newton.\nm: The number of previous iterates to use for the extrapolation. Only valid for :Anderson.\ncondition_number_threshold: The condition number threshold for Least Squares Problem. Only valid for :Anderson.\nextrapolation_period: The number of iterates between extrapolations. Only valid for :MPE, :RRE, :VEA and :SEA. Defaults to 7 for :MPE & :RRE, and 6 for :SEA and :VEA. For :SEA and :VEA, this must be a multiple of 2.\nreplace_invalids: The method to use for replacing invalid iterates. Can be :ReplaceInvalids, :ReplaceVector or :NoAction.\n\nnote: Note\nThis algorithm is only available if FixedPointAcceleration.jl is installed.\n\n\n\n\n\n","category":"type"},{"location":"api/nlsolve/#NLsolve.jl","page":"NLsolve.jl","title":"NLsolve.jl","text":"","category":"section"},{"location":"api/nlsolve/","page":"NLsolve.jl","title":"NLsolve.jl","text":"This is a extension for importing solvers from NLsolve.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/nlsolve/","page":"NLsolve.jl","title":"NLsolve.jl","text":"using Pkg\nPkg.add(\"NLsolve\")\nusing NLsolve, NonlinearSolve","category":"page"},{"location":"api/nlsolve/#Solver-API","page":"NLsolve.jl","title":"Solver API","text":"","category":"section"},{"location":"api/nlsolve/","page":"NLsolve.jl","title":"NLsolve.jl","text":"NLsolveJL","category":"page"},{"location":"api/nlsolve/#NonlinearSolve.NLsolveJL","page":"NLsolve.jl","title":"NonlinearSolve.NLsolveJL","text":"NLsolveJL(; method = :trust_region, autodiff = :central, linesearch = Static(),\n    linsolve = (x, A, b) -> copyto!(x, A\\b), factor = one(Float64), autoscale = true,\n    m = 10, beta = one(Float64))\n\nKeyword Arguments\n\nmethod: the choice of method for solving the nonlinear system.\nautodiff: the choice of method for generating the Jacobian. Defaults to :central or central differencing via FiniteDiff.jl. The other choices are :forward or ADTypes similar to other solvers in NonlinearSolve.\nlinesearch: the line search method to be used within the solver method. The choices are line search types from LineSearches.jl.\nlinsolve: a function linsolve(x, A, b) that solves Ax = b.\nfactor: determines the size of the initial trust region. This size is set to the product of factor and the euclidean norm of u0 if nonzero, or else to factor itself.\nautoscale: if true, then the variables will be automatically rescaled. The scaling factors are the norms of the Jacobian columns.\nm: the amount of history in the Anderson method. Naive \"Picard\"-style iteration can be achieved by setting m=0, but that isn't advisable for contractions whose Lipschitz constants are close to 1. If convergence fails, though, you may consider lowering it.\nbeta: It is also known as DIIS or Pulay mixing, this method is based on the acceleration of the fixed-point iteration xₙ₊₁ = xₙ + beta*f(xₙ), where by default beta = 1.\n\nSubmethod Choice\n\nChoices for methods in NLsolveJL:\n\n:anderson: Anderson-accelerated fixed-point iteration\n:broyden: Broyden's quasi-Newton method\n:newton: Classical Newton method with an optional line search\n:trust_region: Trust region Newton method (the default choice)\n\nFor more information on these arguments, consult the NLsolve.jl documentation.\n\nnote: Note\nThis algorithm is only available if NLsolve.jl is installed.\n\n\n\n\n\n","category":"type"},{"location":"api/siamfanlequations/#SIAMFANLEquations.jl","page":"SIAMFANLEquations.jl","title":"SIAMFANLEquations.jl","text":"","category":"section"},{"location":"api/siamfanlequations/","page":"SIAMFANLEquations.jl","title":"SIAMFANLEquations.jl","text":"This is an extension for importing solvers from SIAMFANLEquations.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/siamfanlequations/","page":"SIAMFANLEquations.jl","title":"SIAMFANLEquations.jl","text":"using Pkg\nPkg.add(\"SIAMFANLEquations\")\nusing SIAMFANLEquations, NonlinearSolve","category":"page"},{"location":"api/siamfanlequations/#Solver-API","page":"SIAMFANLEquations.jl","title":"Solver API","text":"","category":"section"},{"location":"api/siamfanlequations/","page":"SIAMFANLEquations.jl","title":"SIAMFANLEquations.jl","text":"SIAMFANLEquationsJL","category":"page"},{"location":"api/siamfanlequations/#NonlinearSolve.SIAMFANLEquationsJL","page":"SIAMFANLEquations.jl","title":"NonlinearSolve.SIAMFANLEquationsJL","text":"SIAMFANLEquationsJL(; method = :newton, delta = 1e-3, linsolve = nothing,\n    autodiff = missing)\n\nKeyword Arguments\n\nmethod: the choice of method for solving the nonlinear system.\ndelta: initial pseudo time step, default is 1e-3.\nlinsolve : JFNK linear solvers, choices are gmres and bicgstab.\nm: Depth for Anderson acceleration, default as 0 for Picard iteration.\nbeta: Anderson mixing parameter, change f(x) to (1-beta)x+beta*f(x), equivalent to accelerating damped Picard iteration.\nautodiff: Defaults to missing, which means we will default to letting SIAMFANLEquations construct the jacobian if f.jac is not provided. In other cases, we use it to generate a jacobian similar to other NonlinearSolve solvers.\n\nSubmethod Choice\n\n:newton: Classical Newton method.\n:pseudotransient: Pseudo transient method.\n:secant: Secant method for scalar equations.\n:anderson: Anderson acceleration for fixed point iterations.\n\nnote: Note\nThis algorithm is only available if SIAMFANLEquations.jl is installed.\n\n\n\n\n\n","category":"type"},{"location":"native/diagnostics/#diagnostics_api_reference","page":"Diagnostics API","title":"Diagnostics API","text":"","category":"section"},{"location":"native/diagnostics/#Timer-Outputs","page":"Diagnostics API","title":"Timer Outputs","text":"","category":"section"},{"location":"native/diagnostics/","page":"Diagnostics API","title":"Diagnostics API","text":"These functions are not exported since the names have a potential for conflict.","category":"page"},{"location":"native/diagnostics/","page":"Diagnostics API","title":"Diagnostics API","text":"NonlinearSolve.enable_timer_outputs\nNonlinearSolve.disable_timer_outputs\nNonlinearSolve.@static_timeit","category":"page"},{"location":"native/diagnostics/#NonlinearSolve.enable_timer_outputs","page":"Diagnostics API","title":"NonlinearSolve.enable_timer_outputs","text":"enable_timer_outputs()\n\nEnable TimerOutput for all NonlinearSolve algorithms. This is useful for debugging but has some overhead, so it is disabled by default.\n\n\n\n\n\n","category":"function"},{"location":"native/diagnostics/#NonlinearSolve.disable_timer_outputs","page":"Diagnostics API","title":"NonlinearSolve.disable_timer_outputs","text":"disable_timer_outputs()\n\nDisable TimerOutput for all NonlinearSolve algorithms. This should be used when NonlinearSolve is being used in performance-critical code.\n\n\n\n\n\n","category":"function"},{"location":"native/diagnostics/#NonlinearSolve.@static_timeit","page":"Diagnostics API","title":"NonlinearSolve.@static_timeit","text":"@static_timeit to name expr\n\nLike TimerOutputs.@timeit_debug but has zero overhead if TimerOutputs is disabled via NonlinearSolve.disable_timer_outputs().\n\n\n\n\n\n","category":"macro"},{"location":"native/diagnostics/#Tracing-API","page":"Diagnostics API","title":"Tracing API","text":"","category":"section"},{"location":"native/diagnostics/","page":"Diagnostics API","title":"Diagnostics API","text":"TraceAll\nTraceWithJacobianConditionNumber\nTraceMinimal","category":"page"},{"location":"native/diagnostics/#NonlinearSolve.TraceAll","page":"Diagnostics API","title":"NonlinearSolve.TraceAll","text":"TraceAll(freq)\nTraceAll(; print_frequency = 1, store_frequency::Int = 1)\n\nTraceWithJacobianConditionNumber + Store the Jacobian, u, f(u), and δu.\n\nwarning: Warning\nThis is very expensive and makes copyies of the Jacobian, u, f(u), and δu.\n\nSee also TraceMinimal and TraceWithJacobianConditionNumber.\n\n\n\n\n\n","category":"type"},{"location":"native/diagnostics/#NonlinearSolve.TraceWithJacobianConditionNumber","page":"Diagnostics API","title":"NonlinearSolve.TraceWithJacobianConditionNumber","text":"TraceWithJacobianConditionNumber(freq)\nTraceWithJacobianConditionNumber(; print_frequency = 1, store_frequency::Int = 1)\n\nTraceMinimal + Print the Condition Number of the Jacobian.\n\nSee also TraceMinimal and TraceAll.\n\n\n\n\n\n","category":"type"},{"location":"native/diagnostics/#NonlinearSolve.TraceMinimal","page":"Diagnostics API","title":"NonlinearSolve.TraceMinimal","text":"TraceMinimal(freq)\nTraceMinimal(; print_frequency = 1, store_frequency::Int = 1)\n\nTrace Minimal Information\n\nIteration Number\nf(u) inf-norm\nStep 2-norm\n\nSee also TraceWithJacobianConditionNumber and TraceAll.\n\n\n\n\n\n","category":"type"},{"location":"native/diagnostics/","page":"Diagnostics API","title":"Diagnostics API","text":"For details about the arguments refer to the documentation of NonlinearSolve.AbstractNonlinearSolveTraceLevel.","category":"page"},{"location":"basics/sparsity_detection/#sparsity-detection","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"","category":"section"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"This section describes how to enable Sparsity Detection. For a detailed tutorial on how to use this in an actual problem, see this tutorial on Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems.","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"Notation wise we are trying to solve for x such that nlfunc(x) = 0.","category":"page"},{"location":"basics/sparsity_detection/#Case-I:-Sparse-Jacobian-Prototype-is-Provided","page":"(Semi-)Automatic Sparsity Detection","title":"Case I: Sparse Jacobian Prototype is Provided","text":"","category":"section"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"Let's say you have a Sparse Jacobian Prototype jac_prototype, in this case you can create your problem as follows:","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"prob = NonlinearProblem(NonlinearFunction(nlfunc; jac_prototype = jac_prototype), x0)","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"NonlinearSolve will automatically perform matrix coloring and use sparse differentiation.","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"Now you can help the solver further by providing the color vector. This can be done by","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"prob = NonlinearProblem(\n    NonlinearFunction(nlfunc; jac_prototype = jac_prototype, colorvec = colorvec), x0)","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"If the colorvec is not provided, then it is computed on demand.","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"note: Note\nOne thing to be careful about in this case is that colorvec is dependent on the autodiff backend used. ADTypes.mode(ad) isa ADTypes.ForwardMode will assume that the colorvec is the column colorvec, otherwise we will assume that the colorvec is the row colorvec.","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"warning: Warning\nPreviously you could provide a sparsity argument to NonlinearFunction to specify the jacobian prototype. However, to avoid confusion, this is now deprecated. Instead, use the jac_prototype argument. sparsity must be used to exclusively specify the sparsity detection algorithm.","category":"page"},{"location":"basics/sparsity_detection/#Case-II:-Sparsity-Detection-algorithm-is-provided","page":"(Semi-)Automatic Sparsity Detection","title":"Case II: Sparsity Detection algorithm is provided","text":"","category":"section"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"If you don't have a Sparse Jacobian Prototype, but you know the which sparsity detection algorithm you want to use, then you can create your problem as follows:","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"prob = NonlinearProblem(\n    NonlinearFunction(nlfunc; sparsity = SymbolicsSparsityDetector()), x0)  # Remember to have Symbolics.jl loaded\n# OR\nprob = NonlinearProblem(\n    NonlinearFunction(nlfunc; sparsity = TracerSparsityDetector()), x0) # From SparseConnectivityTracer.jl","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"Refer to the documentation of DifferentiationInterface.jl and SparseConnectivityTracer.jl for more information on sparsity detection algorithms.","category":"page"},{"location":"basics/sparsity_detection/#Case-III:-Sparse-AD-Type-is-being-Used","page":"(Semi-)Automatic Sparsity Detection","title":"Case III: Sparse AD Type is being Used","text":"","category":"section"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"warning: Warning\nThis is now deprecated. Please use the previous two cases instead.","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"If you constructed a Nonlinear Solver with a sparse AD type, for example","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"NewtonRaphson(; autodiff = AutoSparse(AutoForwardDiff()))\n# OR\nTrustRegion(; autodiff = AutoSparse(AutoZygote()))","category":"page"},{"location":"basics/sparsity_detection/","page":"(Semi-)Automatic Sparsity Detection","title":"(Semi-)Automatic Sparsity Detection","text":"then NonlinearSolve will automatically perform matrix coloring and use sparse differentiation if none of sparsity or jac_prototype is provided. We default to using TracerSparsityDetector(). Case I/II take precedence for sparsity detection and we perform sparse AD based on those options if those are provided.","category":"page"},{"location":"api/SciMLJacobianOperators/","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.jl","text":"CurrentModule = SciMLJacobianOperators","category":"page"},{"location":"api/SciMLJacobianOperators/#SciMLJacobianOperators.jl","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.jl","text":"","category":"section"},{"location":"api/SciMLJacobianOperators/","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.jl","text":"This is a subpackage on NonlinearSolve providing a general purpose JacVec and VecJac operator built on top on DifferentiationInterface.jl.","category":"page"},{"location":"api/SciMLJacobianOperators/","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.jl","text":"import Pkg\nPkg.add(\"SciMLJacobianOperators\")\nusing SciMLJacobianOperators","category":"page"},{"location":"api/SciMLJacobianOperators/#Jacobian-API","page":"SciMLJacobianOperators.jl","title":"Jacobian API","text":"","category":"section"},{"location":"api/SciMLJacobianOperators/","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.jl","text":"JacobianOperator\nVecJacOperator\nJacVecOperator","category":"page"},{"location":"api/SciMLJacobianOperators/#SciMLJacobianOperators.JacobianOperator","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.JacobianOperator","text":"JacobianOperator{iip, T} <: AbstractJacobianOperator{T} <: AbstractSciMLOperator{T}\n\nA Jacobian Operator Provides both JVP and VJP without materializing either (if possible).\n\nConstructor\n\nJacobianOperator(prob::AbstractNonlinearProblem, fu, u; jvp_autodiff = nothing,\n    vjp_autodiff = nothing, skip_vjp::Val = Val(false), skip_jvp::Val = Val(false))\n\nBy default, the JacobianOperator will compute JVP. Use Base.adjoint or Base.transpose to switch to VJP.\n\nComputing the VJP\n\nComputing the VJP is done according to the following rules:\n\nIf f has a vjp method, then we use that.\nIf f has a jac method and no vjp_autodiff is provided, then we use jac * v.\nIf vjp_autodiff is provided we using DifferentiationInterface.jl to compute the VJP.\n\nComputing the JVP\n\nComputing the JVP is done according to the following rules:\n\nIf f has a jvp method, then we use that.\nIf f has a jac method and no jvp_autodiff is provided, then we use v * jac.\nIf jvp_autodiff is provided we using DifferentiationInterface.jl to compute the JVP.\n\nSpecial Case (Number)\n\nFor Number inputs, VJP and JVP are not distinct. Hence, if either vjp or jvp is provided, then we use that. If neither is provided, then we use v * jac if jac is provided. Finally, we use the respective autodiff methods to compute the derivative using DifferentiationInterface.jl and multiply by v.\n\nMethods Provided\n\nwarning: Warning\nCurrently it is expected that p during problem construction is same as p during operator evaluation. This restriction will be lifted in the future.\n\n(op::JacobianOperator)(v, u, p): Computes ∂f(u, p)/∂u * v or ∂f(u, p)/∂uᵀ * v.\n(op::JacobianOperator)(res, v, u, p): Computes ∂f(u, p)/∂u * v or ∂f(u, p)/∂uᵀ * v and stores the result in res.\n\nSee also VecJacOperator and JacVecOperator.\n\n\n\n\n\n","category":"type"},{"location":"api/SciMLJacobianOperators/#SciMLJacobianOperators.VecJacOperator","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.VecJacOperator","text":"VecJacOperator(args...; autodiff = nothing, kwargs...)\n\nConstructs a JacobianOperator which only provides the VJP using the vjp_autodiff = autodiff.\n\n\n\n\n\n","category":"function"},{"location":"api/SciMLJacobianOperators/#SciMLJacobianOperators.JacVecOperator","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.JacVecOperator","text":"JacVecOperator(args...; autodiff = nothing, kwargs...)\n\nConstructs a JacobianOperator which only provides the JVP using the jvp_autodiff = autodiff.\n\n\n\n\n\n","category":"function"},{"location":"api/SciMLJacobianOperators/#Stateful-Operators","page":"SciMLJacobianOperators.jl","title":"Stateful Operators","text":"","category":"section"},{"location":"api/SciMLJacobianOperators/","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.jl","text":"StatefulJacobianOperator\nStatefulJacobianNormalFormOperator","category":"page"},{"location":"api/SciMLJacobianOperators/#SciMLJacobianOperators.StatefulJacobianOperator","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.StatefulJacobianOperator","text":"StatefulJacobianOperator(jac_op::JacobianOperator, u, p)\n\nWrapper over a JacobianOperator which stores the input u and p and defines mul! and * for computing VJPs and JVPs.\n\n\n\n\n\n","category":"type"},{"location":"api/SciMLJacobianOperators/#SciMLJacobianOperators.StatefulJacobianNormalFormOperator","page":"SciMLJacobianOperators.jl","title":"SciMLJacobianOperators.StatefulJacobianNormalFormOperator","text":"StatefulJacobianNormalFormOperator(vjp_operator, jvp_operator, cache)\n\nThis constructs a Normal Form Jacobian Operator, i.e. it constructs the operator corresponding to JᵀJ where J is the Jacobian Operator. This is not meant to be directly constructed, rather it is constructed with * on two StatefulJacobianOperators.\n\n\n\n\n\n","category":"type"},{"location":"native/solvers/#NonlinearSolve.jl-Solvers","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"","category":"section"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"These are the native solvers of NonlinearSolve.jl.","category":"page"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"Pages = [\"solvers.md\"]","category":"page"},{"location":"native/solvers/#General-Keyword-Arguments","page":"NonlinearSolve.jl Solvers","title":"General Keyword Arguments","text":"","category":"section"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"Several Algorithms share the same specification for common keyword arguments. Those are documented in this section to avoid repetition. Certain algorithms might have additional considerations for these keyword arguments, which are documented in the algorithm's documentation.","category":"page"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"linsolve: the LinearSolve.jl solvers used for the linear solves within the Newton method. Defaults to nothing, which means it uses the LinearSolve.jl default algorithm choice. For more information on available algorithm choices, see the LinearSolve.jl documentation.\nprecs: the choice of preconditioners for the linear solver. Defaults to using no preconditioners. For more information on specifying preconditioners for LinearSolve algorithms, consult the LinearSolve.jl documentation.\nlinesearch: the line search algorithm to use. Defaults to NoLineSearch(), which means that no line search is performed.  Algorithms from LineSearches.jl must be wrapped in LineSearchesJL before being supplied. For a detailed documentation refer to Line Search Algorithms.\nautodiff/jacobian_ad: etermines the backend used for the Jacobian. Note that this argument is ignored if an analytical Jacobian is passed, as that will be used instead. Defaults to nothing which means that a default is selected according to the problem specification! Valid choices are types from ADTypes.jl.\nforward_ad/vjp_autodiff: similar to autodiff, but is used to compute Jacobian Vector Products. Ignored if the NonlinearFunction contains the jvp function.\nreverse_ad/vjp_autodiff: similar to autodiff, but is used to compute Vector Jacobian Products. Ignored if the NonlinearFunction contains the vjp function.\nconcrete_jac: whether to build a concrete Jacobian. If a Krylov-subspace method is used, then the Jacobian will not be constructed and instead direct Jacobian-Vector products J*v are computed using forward-mode automatic differentiation or finite differencing tricks (without ever constructing the Jacobian). However, if the Jacobian is still needed, for example for a preconditioner, concrete_jac = true can be passed in order to force the construction of the Jacobian.","category":"page"},{"location":"native/solvers/#Nonlinear-Solvers","page":"NonlinearSolve.jl Solvers","title":"Nonlinear Solvers","text":"","category":"section"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"NewtonRaphson\nDFSane\nBroyden\nKlement\nLimitedMemoryBroyden","category":"page"},{"location":"native/solvers/#NonlinearSolve.NewtonRaphson","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.NewtonRaphson","text":"NewtonRaphson(; concrete_jac = nothing, linsolve = nothing, linesearch = NoLineSearch(),\n    precs = DEFAULT_PRECS, autodiff = nothing)\n\nAn advanced NewtonRaphson implementation with support for efficient handling of sparse matrices via colored automatic differentiation and preconditioned linear solvers. Designed for large-scale and numerically-difficult nonlinear systems.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.DFSane","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.DFSane","text":"DFSane(; σ_min = 1 // 10^10, σ_max = 1e10, σ_1 = 1, M::Int = 10, γ = 1 // 10^4,\n    τ_min = 1 // 10, τ_max = 1 // 2, n_exp::Int = 2, max_inner_iterations::Int = 100,\n    η_strategy = (fn_1, n, x_n, f_n) -> fn_1 / n^2)\n\nA low-overhead and allocation-free implementation of the df-sane method for solving large-scale nonlinear systems of equations. For in depth information about all the parameters and the algorithm, see La Cruz et al. [2].\n\nKeyword Arguments\n\nσ_min: the minimum value of the spectral coefficient σₙ which is related to the step size in the algorithm. Defaults to 1e-10.\nσ_max: the maximum value of the spectral coefficient σₙ which is related to the step size in the algorithm. Defaults to 1e10.\n\nFor other keyword arguments, see RobustNonMonotoneLineSearch.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.Broyden","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.Broyden","text":"Broyden(; max_resets::Int = 100, linesearch = NoLineSearch(), reset_tolerance = nothing,\n    init_jacobian::Val = Val(:identity), autodiff = nothing, alpha = nothing)\n\nAn implementation of Broyden's Method [3] with resetting and line search.\n\nKeyword Arguments\n\nmax_resets: the maximum number of resets to perform. Defaults to 100.\nreset_tolerance: the tolerance for the reset check. Defaults to sqrt(eps(real(eltype(u)))).\nalpha: If init_jacobian is set to Val(:identity), then the initial Jacobian inverse is set to be (αI)⁻¹. Defaults to nothing which implies α = max(norm(u), 1) / (2 * norm(fu)).\ninit_jacobian: the method to use for initializing the jacobian. Defaults to Val(:identity). Choices include:\nVal(:identity): Identity Matrix.\nVal(:true_jacobian): True Jacobian. This is a good choice for differentiable problems.\nupdate_rule: Update Rule for the Jacobian. Choices are:\nVal(:good_broyden): Good Broyden's Update Rule\nVal(:bad_broyden): Bad Broyden's Update Rule\nVal(:diagonal): Only update the diagonal of the Jacobian. This algorithm may be useful for specific problems, but whether it will work may depend strongly on the problem\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.Klement","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.Klement","text":"Klement(; max_resets = 100, linsolve = NoLineSearch(), linesearch = nothing,\n    precs = DEFAULT_PRECS, alpha = nothing, init_jacobian::Val = Val(:identity),\n    autodiff = nothing)\n\nAn implementation of Klement [4] with line search, preconditioning and customizable linear solves. It is recommended to use Broyden for most problems over this.\n\nKeyword Arguments\n\nmax_resets: the maximum number of resets to perform. Defaults to 100.\nalpha: If init_jacobian is set to Val(:identity), then the initial Jacobian inverse is set to be αI. Defaults to 1. Can be set to nothing which implies α = max(norm(u), 1) / (2 * norm(fu)).\ninit_jacobian: the method to use for initializing the jacobian. Defaults to Val(:identity). Choices include:\nVal(:identity): Identity Matrix.\nVal(:true_jacobian): True Jacobian. Our tests suggest that this is not very stable. Instead using Broyden with Val(:true_jacobian) gives faster and more reliable convergence.\nVal(:true_jacobian_diagonal): Diagonal of True Jacobian. This is a good choice for differentiable problems.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.LimitedMemoryBroyden","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.LimitedMemoryBroyden","text":"LimitedMemoryBroyden(; max_resets::Int = 3, linesearch = NoLineSearch(),\n    threshold::Val = Val(10), reset_tolerance = nothing, alpha = nothing)\n\nAn implementation of LimitedMemoryBroyden [5] with resetting and line search.\n\nKeyword Arguments\n\nmax_resets: the maximum number of resets to perform. Defaults to 3.\nreset_tolerance: the tolerance for the reset check. Defaults to sqrt(eps(real(eltype(u)))).\nthreshold: the number of vectors to store in the low rank approximation. Defaults to Val(10).\nalpha: The initial Jacobian inverse is set to be (αI)⁻¹. Defaults to nothing which implies α = max(norm(u), 1) / (2 * norm(fu)).\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#Nonlinear-Least-Squares-Solvers","page":"NonlinearSolve.jl Solvers","title":"Nonlinear Least Squares Solvers","text":"","category":"section"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"GaussNewton","category":"page"},{"location":"native/solvers/#NonlinearSolve.GaussNewton","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.GaussNewton","text":"GaussNewton(; concrete_jac = nothing, linsolve = nothing, linesearch = NoLineSearch(),\n    precs = DEFAULT_PRECS, adkwargs...)\n\nAn advanced GaussNewton implementation with support for efficient handling of sparse matrices via colored automatic differentiation and preconditioned linear solvers. Designed for large-scale and numerically-difficult nonlinear least squares problems.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#Both-Nonlinear-and-Nonlinear-Least-Squares-Solvers","page":"NonlinearSolve.jl Solvers","title":"Both Nonlinear & Nonlinear Least Squares Solvers","text":"","category":"section"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"These solvers can be used for both nonlinear and nonlinear least squares problems.","category":"page"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"TrustRegion\nLevenbergMarquardt\nPseudoTransient","category":"page"},{"location":"native/solvers/#NonlinearSolve.TrustRegion","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.TrustRegion","text":"TrustRegion(; concrete_jac = nothing, linsolve = nothing, precs = DEFAULT_PRECS,\n    radius_update_scheme = RadiusUpdateSchemes.Simple, max_trust_radius::Real = 0 // 1,\n    initial_trust_radius::Real = 0 // 1, step_threshold::Real = 1 // 10000,\n    shrink_threshold::Real = 1 // 4, expand_threshold::Real = 3 // 4,\n    shrink_factor::Real = 1 // 4, expand_factor::Real = 2 // 1,\n    max_shrink_times::Int = 32, vjp_autodiff = nothing, autodiff = nothing)\n\nAn advanced TrustRegion implementation with support for efficient handling of sparse matrices via colored automatic differentiation and preconditioned linear solvers. Designed for large-scale and numerically-difficult nonlinear systems.\n\nKeyword Arguments\n\nradius_update_scheme: the scheme used to update the trust region radius. Defaults to RadiusUpdateSchemes.Simple. See RadiusUpdateSchemes for more details. For a review on trust region radius update schemes, see Yuan [6].\n\nFor the remaining arguments, see NonlinearSolve.GenericTrustRegionScheme documentation.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.LevenbergMarquardt","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.LevenbergMarquardt","text":"LevenbergMarquardt(; linsolve = nothing,\n    precs = DEFAULT_PRECS, damping_initial::Real = 1.0, α_geodesic::Real = 0.75,\n    damping_increase_factor::Real = 2.0, damping_decrease_factor::Real = 3.0,\n    finite_diff_step_geodesic = 0.1, b_uphill::Real = 1.0, autodiff = nothing,\n    min_damping_D::Real = 1e-8, disable_geodesic = Val(false))\n\nAn advanced Levenberg-Marquardt implementation with the improvements suggested in Transtrum and Sethna [1]. Designed for large-scale and numerically-difficult nonlinear systems.\n\nKeyword Arguments\n\ndamping_initial: the starting value for the damping factor. The damping factor is inversely proportional to the step size. The damping factor is adjusted during each iteration. Defaults to 1.0. See Section 2.1 of Transtrum and Sethna [1].\ndamping_increase_factor: the factor by which the damping is increased if a step is rejected. Defaults to 2.0. See Section 2.1 of Transtrum and Sethna [1].\ndamping_decrease_factor: the factor by which the damping is decreased if a step is accepted. Defaults to 3.0. See Section 2.1 of Transtrum and Sethna [1].\nmin_damping_D: the minimum value of the damping terms in the diagonal damping matrix DᵀD, where DᵀD is given by the largest diagonal entries of JᵀJ yet encountered, where J is the Jacobian. It is suggested by Transtrum and Sethna [1] to use a minimum value of the elements in DᵀD to prevent the damping from being too small. Defaults to 1e-8.\ndisable_geodesic: Disables Geodesic Acceleration if set to Val(true). It provides a way to trade-off robustness for speed, though in most situations Geodesic Acceleration should not be disabled.\n\nFor the remaining arguments, see GeodesicAcceleration and NonlinearSolve.LevenbergMarquardtTrustRegion documentations.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.PseudoTransient","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.PseudoTransient","text":"PseudoTransient(; concrete_jac = nothing, linsolve = nothing,\n    linesearch::AbstractNonlinearSolveLineSearchAlgorithm = NoLineSearch(),\n    precs = DEFAULT_PRECS, autodiff = nothing)\n\nAn implementation of PseudoTransient Method [7] that is used to solve steady state problems in an accelerated manner. It uses an adaptive time-stepping to integrate an initial value of nonlinear problem until sufficient accuracy in the desired steady-state is achieved to switch over to Newton's method and gain a rapid convergence. This implementation specifically uses \"switched evolution relaxation\" [8] SER method.\n\nKeyword Arguments\n\nalpha_initial : the initial pseudo time step. It defaults to 1e-3. If it is small, you are going to need more iterations to converge but it can be more stable.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#Polyalgorithms","page":"NonlinearSolve.jl Solvers","title":"Polyalgorithms","text":"","category":"section"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"NonlinearSolvePolyAlgorithm\nFastShortcutNonlinearPolyalg\nFastShortcutNLLSPolyalg\nRobustMultiNewton","category":"page"},{"location":"native/solvers/#NonlinearSolve.NonlinearSolvePolyAlgorithm","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.NonlinearSolvePolyAlgorithm","text":"NonlinearSolvePolyAlgorithm(algs, ::Val{pType} = Val(:NLS);\n    start_index = 1) where {pType}\n\nA general way to define PolyAlgorithms for NonlinearProblem and NonlinearLeastSquaresProblem. This is a container for a tuple of algorithms that will be tried in order until one succeeds. If none succeed, then the algorithm with the lowest residual is returned.\n\nArguments\n\nalgs: a tuple of algorithms to try in-order! (If this is not a Tuple, then the returned algorithm is not type-stable).\npType: the problem type. Defaults to :NLS for NonlinearProblem and :NLLS for NonlinearLeastSquaresProblem. This is used to determine the correct problem type to dispatch on.\n\nKeyword Arguments\n\nstart_index: the index to start at. Defaults to 1.\n\nExample\n\nusing NonlinearSolve\n\nalg = NonlinearSolvePolyAlgorithm((NewtonRaphson(), Broyden()))\n\n\n\n\n\n","category":"type"},{"location":"native/solvers/#NonlinearSolve.FastShortcutNonlinearPolyalg","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.FastShortcutNonlinearPolyalg","text":"FastShortcutNonlinearPolyalg(::Type{T} = Float64; concrete_jac = nothing,\n    linsolve = nothing, precs = DEFAULT_PRECS, must_use_jacobian::Val = Val(false),\n    prefer_simplenonlinearsolve::Val{SA} = Val(false), autodiff = nothing,\n    u0_len::Union{Int, Nothing} = nothing) where {T}\n\nA polyalgorithm focused on balancing speed and robustness. It first tries less robust methods for more performance and then tries more robust techniques if the faster ones fail.\n\nArguments\n\nT: The eltype of the initial guess. It is only used to check if some of the algorithms are compatible with the problem type. Defaults to Float64.\n\nKeyword Arguments\n\nu0_len: The length of the initial guess. If this is nothing, then the length of the initial guess is not checked. If this is an integer and it is less than 25, we use jacobian based methods.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.FastShortcutNLLSPolyalg","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.FastShortcutNLLSPolyalg","text":"FastShortcutNLLSPolyalg(::Type{T} = Float64; concrete_jac = nothing, linsolve = nothing,\n    precs = DEFAULT_PRECS, autodiff = nothing, kwargs...)\n\nA polyalgorithm focused on balancing speed and robustness. It first tries less robust methods for more performance and then tries more robust techniques if the faster ones fail.\n\nArguments\n\nT: The eltype of the initial guess. It is only used to check if some of the algorithms are compatible with the problem type. Defaults to Float64.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#NonlinearSolve.RobustMultiNewton","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.RobustMultiNewton","text":"RobustMultiNewton(::Type{T} = Float64; concrete_jac = nothing, linsolve = nothing,\n    precs = DEFAULT_PRECS, autodiff = nothing)\n\nA polyalgorithm focused on robustness. It uses a mixture of Newton methods with different globalizing techniques (trust region updates, line searches, etc.) in order to find a method that is able to adequately solve the minimization problem.\n\nBasically, if this algorithm fails, then \"most\" good ways of solving your problem fail and you may need to think about reformulating the model (either there is an issue with the model, or more precision / more stable linear solver choice is required).\n\nArguments\n\nT: The eltype of the initial guess. It is only used to check if some of the algorithms are compatible with the problem type. Defaults to Float64.\n\n\n\n\n\n","category":"function"},{"location":"native/solvers/#Advanced-Solvers","page":"NonlinearSolve.jl Solvers","title":"Advanced Solvers","text":"","category":"section"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"All of the previously mentioned solvers are wrappers around the following solvers. These are meant for advanced users and allow building custom solvers.","category":"page"},{"location":"native/solvers/","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.jl Solvers","text":"ApproximateJacobianSolveAlgorithm\nGeneralizedFirstOrderAlgorithm\nGeneralizedDFSane","category":"page"},{"location":"native/solvers/#NonlinearSolve.ApproximateJacobianSolveAlgorithm","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.ApproximateJacobianSolveAlgorithm","text":"ApproximateJacobianSolveAlgorithm{concrete_jac, name}(; linesearch = missing,\n    trustregion = missing, descent, update_rule, reinit_rule, initialization,\n    max_resets::Int = typemax(Int), max_shrink_times::Int = typemax(Int))\nApproximateJacobianSolveAlgorithm(; concrete_jac = nothing,\n    name::Symbol = :unknown, kwargs...)\n\nNonlinear Solve Algorithms using an Iterative Approximation of the Jacobian. Most common examples include Broyden's Method.\n\nKeyword Arguments\n\ntrustregion: Globalization using a Trust Region Method. This needs to follow the NonlinearSolve.AbstractTrustRegionMethod interface.\ndescent: The descent method to use to compute the step. This needs to follow the NonlinearSolve.AbstractDescentAlgorithm interface.\nmax_shrink_times: The maximum number of times the trust region radius can be shrunk before the algorithm terminates.\nupdate_rule: The update rule to use to update the Jacobian. This needs to follow the NonlinearSolve.AbstractApproximateJacobianUpdateRule interface.\nreinit_rule: The reinitialization rule to use to reinitialize the Jacobian. This needs to follow the NonlinearSolve.AbstractResetCondition interface.\ninitialization: The initialization method to use to initialize the Jacobian. This needs to follow the NonlinearSolve.AbstractJacobianInitialization interface.\n\n\n\n\n\n","category":"type"},{"location":"native/solvers/#NonlinearSolve.GeneralizedFirstOrderAlgorithm","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.GeneralizedFirstOrderAlgorithm","text":"GeneralizedFirstOrderAlgorithm{concrete_jac, name}(; descent, linesearch = missing,\n    trustregion = missing, jacobian_ad = nothing, forward_ad = nothing,\n    reverse_ad = nothing, max_shrink_times::Int = typemax(Int))\nGeneralizedFirstOrderAlgorithm(; concrete_jac = nothing, name::Symbol = :unknown,\n    kwargs...)\n\nThis is a Generalization of First-Order (uses Jacobian) Nonlinear Solve Algorithms. The most common example of this is Newton-Raphson Method.\n\nFirst Order here refers to the order of differentiation, and should not be confused with the order of convergence.\n\ntrustregion and linesearch cannot be specified together.\n\nKeyword Arguments\n\ntrustregion: Globalization using a Trust Region Method. This needs to follow the NonlinearSolve.AbstractTrustRegionMethod interface.\ndescent: The descent method to use to compute the step. This needs to follow the NonlinearSolve.AbstractDescentAlgorithm interface.\nmax_shrink_times: The maximum number of times the trust region radius can be shrunk before the algorithm terminates.\n\n\n\n\n\n","category":"type"},{"location":"native/solvers/#NonlinearSolve.GeneralizedDFSane","page":"NonlinearSolve.jl Solvers","title":"NonlinearSolve.GeneralizedDFSane","text":"GeneralizedDFSane{name}(linesearch, σ_min, σ_max, σ_1)\n\nA generalized version of the DF-SANE algorithm. This algorithm is a Jacobian-Free Spectral Method.\n\nArguments\n\nlinesearch: Globalization using a Line Search Method. This needs to follow the NonlinearSolve.AbstractNonlinearSolveLineSearchAlgorithm interface. This is not optional currently, but that restriction might be lifted in the future.\nσ_min: The minimum spectral parameter allowed. This is used to ensure that the spectral parameter is not too small.\nσ_max: The maximum spectral parameter allowed. This is used to ensure that the spectral parameter is not too large.\nσ_1: The initial spectral parameter. If this is not provided, then the algorithm initializes it as σ_1 = <u, u> / <u, f(u)>.\n\n\n\n\n\n","category":"type"},{"location":"native/descent/#Descent-Subroutines","page":"Descent Subroutines","title":"Descent Subroutines","text":"","category":"section"},{"location":"native/descent/","page":"Descent Subroutines","title":"Descent Subroutines","text":"The following subroutines are available for computing the descent direction.","category":"page"},{"location":"native/descent/","page":"Descent Subroutines","title":"Descent Subroutines","text":"Pages = [\"descent.md\"]","category":"page"},{"location":"native/descent/#Core-Subroutines","page":"Descent Subroutines","title":"Core Subroutines","text":"","category":"section"},{"location":"native/descent/","page":"Descent Subroutines","title":"Descent Subroutines","text":"NewtonDescent\nSteepestDescent\nDampedNewtonDescent","category":"page"},{"location":"native/descent/#NonlinearSolve.NewtonDescent","page":"Descent Subroutines","title":"NonlinearSolve.NewtonDescent","text":"NewtonDescent(; linsolve = nothing, precs = DEFAULT_PRECS)\n\nCompute the descent direction as J δu = -fu. For non-square Jacobian problems, this is commonly referred to as the Gauss-Newton Descent.\n\nSee also Dogleg, SteepestDescent, DampedNewtonDescent.\n\n\n\n\n\n","category":"type"},{"location":"native/descent/#NonlinearSolve.SteepestDescent","page":"Descent Subroutines","title":"NonlinearSolve.SteepestDescent","text":"SteepestDescent(; linsolve = nothing, precs = DEFAULT_PRECS)\n\nCompute the descent direction as δu = -Jᵀfu. The linear solver and preconditioner are only used if J is provided in the inverted form.\n\nSee also Dogleg, NewtonDescent, DampedNewtonDescent.\n\n\n\n\n\n","category":"type"},{"location":"native/descent/#NonlinearSolve.DampedNewtonDescent","page":"Descent Subroutines","title":"NonlinearSolve.DampedNewtonDescent","text":"DampedNewtonDescent(; linsolve = nothing, precs = DEFAULT_PRECS, initial_damping,\n    damping_fn)\n\nA Newton descent algorithm with damping. The damping factor is computed using the damping_fn function. The descent direction is computed as (JᵀJ + λDᵀD) δu = -fu. For non-square Jacobians, we default to solving for Jδx = -fu and √λ⋅D δx = 0 simultaneously. If the linear solver can't handle non-square matrices, we use the normal form equations (JᵀJ + λDᵀD) δu = Jᵀ fu. Note that this factorization is often the faster choice, but it is not as numerically stable as the least squares solver.\n\nThe damping factor returned must be a non-negative number.\n\nKeyword Arguments\n\ninitial_damping: The initial damping factor to use\ndamping_fn: The function to use to compute the damping factor. This must satisfy the NonlinearSolve.AbstractDampingFunction interface.\n\n\n\n\n\n","category":"type"},{"location":"native/descent/#Special-Trust-Region-Descent-Subroutines","page":"Descent Subroutines","title":"Special Trust Region Descent Subroutines","text":"","category":"section"},{"location":"native/descent/","page":"Descent Subroutines","title":"Descent Subroutines","text":"Dogleg","category":"page"},{"location":"native/descent/#NonlinearSolve.Dogleg","page":"Descent Subroutines","title":"NonlinearSolve.Dogleg","text":"Dogleg(; linsolve = nothing, precs = DEFAULT_PRECS)\n\nSwitch between Newton's method and the steepest descent method depending on the size of the trust region. The trust region is specified via keyword argument trust_region to solve!.\n\nSee also SteepestDescent, NewtonDescent, DampedNewtonDescent.\n\n\n\n\n\n","category":"type"},{"location":"native/descent/#Special-Levenberg-Marquardt-Descent-Subroutines","page":"Descent Subroutines","title":"Special Levenberg Marquardt Descent Subroutines","text":"","category":"section"},{"location":"native/descent/","page":"Descent Subroutines","title":"Descent Subroutines","text":"GeodesicAcceleration","category":"page"},{"location":"native/descent/#NonlinearSolve.GeodesicAcceleration","page":"Descent Subroutines","title":"NonlinearSolve.GeodesicAcceleration","text":"GeodesicAcceleration(; descent, finite_diff_step_geodesic, α)\n\nUses the descent algorithm to compute the velocity and acceleration terms for the geodesic acceleration method. The velocity and acceleration terms are then combined to compute the descent direction.\n\nThis method in its current form was developed for LevenbergMarquardt. Performance for other methods are not theorectically or experimentally verified.\n\nKeyword Arguments\n\ndescent: the descent algorithm to use for computing the velocity and acceleration.\nfinite_diff_step_geodesic: the step size used for finite differencing used to calculate the geodesic acceleration. Defaults to 0.1 which means that the step size is approximately 10% of the first-order step. See Section 3 of [1].\nα: a factor that determines if a step is accepted or rejected. To incorporate geodesic acceleration as an addition to the Levenberg-Marquardt algorithm, it is necessary that acceptable steps meet the condition frac2av le alpha_textgeodesic, where a is the geodesic acceleration, v is the Levenberg-Marquardt algorithm's step (velocity along a geodesic path) and α_geodesic is some number of order 1. For most problems α_geodesic = 0.75 is a good value but for problems where convergence is difficult α_geodesic = 0.1 is an effective choice. Defaults to 0.75. See Section 3 of Transtrum and Sethna [1].\n\n\n\n\n\n","category":"type"},{"location":"tutorials/modelingtoolkit/#modelingtoolkit","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"","category":"section"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"ModelingToolkit.jl is a symbolic-numeric modeling system for the Julia SciML ecosystem. It adds a high-level interactive interface for the numerical solvers which can make it easy to symbolically modify and generate equations to be solved. The basic form of using ModelingToolkit looks as follows:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"using ModelingToolkit, NonlinearSolve\n\n@variables x y z\n@parameters σ ρ β\n\n# Define a nonlinear system\neqs = [0 ~ σ * (y - x), 0 ~ x * (ρ - z) - y, 0 ~ x * y - β * z]\n@mtkbuild ns = NonlinearSystem(eqs, [x, y, z], [σ, ρ, β])\n\nu0 = [x => 1.0, y => 0.0, z => 0.0]\n\nps = [σ => 10.0\n      ρ => 26.0\n      β => 8 / 3]\n\nprob = NonlinearProblem(ns, u0, ps)\nsol = solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/modelingtoolkit/#Symbolic-Derivations-of-Extra-Functions","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Derivations of Extra Functions","text":"","category":"section"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"As a symbolic system, ModelingToolkit can be used to represent the equations and derive new forms. For example, let's look at the equations:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"equations(ns)","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"We can ask it what the Jacobian of our system is via calculate_jacobian:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"calculate_jacobian(ns)","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"We can tell MTK to generate a computable form of this analytical Jacobian via jac = true to help the solver use efficient forms:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"prob = NonlinearProblem(ns, u0, ps, jac = true)\nsol = solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/modelingtoolkit/#Symbolic-Simplification-of-Nonlinear-Systems-via-Tearing","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Simplification of Nonlinear Systems via Tearing","text":"","category":"section"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"One of the major reasons for using ModelingToolkit is to allow structural simplification of the systems. It's very easy to write down a mathematical model that, in theory, could be solved more simply. Let's take a look at a quick system:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"@variables u1 u2 u3 u4 u5\neqs = [0 ~ u1 - sin(u5), 0 ~ u2 - cos(u1), 0 ~ u3 - hypot(u1, u2),\n    0 ~ u4 - hypot(u2, u3), 0 ~ u5 - hypot(u4, u1)]\n@named sys = NonlinearSystem(eqs, [u1, u2, u3, u4, u5], [])","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"If we run structural simplification, we receive the following form:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"sys = structural_simplify(sys)","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"equations(sys)","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"How did it do this? Let's look at the observed to see the relationships that it found:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"observed(sys)","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"Using ModelingToolkit, we can build and solve the simplified system:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"u0 = [u5 .=> 1.0]\nprob = NonlinearProblem(sys, u0)\nsol = solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"We can then use symbolic indexing to retrieve any variable:","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"sol[u1]","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"sol[u2]","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"sol[u3]","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"sol[u4]","category":"page"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"sol[u5]","category":"page"},{"location":"tutorials/modelingtoolkit/#Component-Based-and-Acausal-Modeling","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Component-Based and Acausal Modeling","text":"","category":"section"},{"location":"tutorials/modelingtoolkit/","page":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","title":"Symbolic Nonlinear System Definition and Acceleration via ModelingToolkit","text":"If you're interested in building models in a component or block based form, such as seen in systems like Simulink or Modelica, take a deeper look at ModelingToolkit.jl's documentation which goes into detail on such features.","category":"page"},{"location":"tutorials/code_optimization/#code_optimization","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"","category":"section"},{"location":"tutorials/code_optimization/#General-Code-Optimization-in-Julia","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"General Code Optimization in Julia","text":"","category":"section"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Before starting this tutorial, we recommend the reader to check out one of the many tutorials for optimization Julia code. The following is an incomplete list:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"The Julia Performance Tips\nMIT 18.337 Course Notes on Optimizing Serial Code\nWhat scientists must know about hardware to write fast code","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"User-side optimizations are important because, for sufficiently difficult problems, most time will be spent inside your f function, the function you are trying to solve. “Efficient solvers\" are those that reduce the required number of f calls to hit the error tolerance. The main ideas for optimizing your nonlinear solver code, or any Julia function, are the following:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Make it non-allocating\nUse StaticArrays for small arrays\nUse broadcast fusion\nMake it type-stable\nReduce redundant calculations\nMake use of BLAS calls\nOptimize algorithm choice","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"We'll discuss these strategies in the context of nonlinear solvers. Let's start with small systems.","category":"page"},{"location":"tutorials/code_optimization/#Optimizing-Nonlinear-Solver-Code-for-Small-Systems","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Optimizing Nonlinear Solver Code for Small Systems","text":"","category":"section"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Take for example a prototypical small nonlinear solver code in its out-of-place form:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"using NonlinearSolve\n\nf(u, p) = u .* u .- p\nu0 = [1.0, 1.0]\np = 2.0\nprob = NonlinearProblem(f, u0, p)\nsol = solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"We can use BenchmarkTools.jl to get more precise timings:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"using BenchmarkTools\n\n@benchmark solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Note that this way of writing the function is a shorthand for:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"f(u, p) = [u[1] * u[1] - p, u[2] * u[2] - p]","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"where the function f returns an array. This is a common pattern from things like MATLAB's fzero or SciPy's scipy.optimize.fsolve. However, by design it's very slow. In the benchmark you can see that there are many allocations. These allocations cause the memory allocator to take more time than the actual numerics itself, which is one of the reasons why codes from MATLAB and Python end up slow.","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"In order to avoid this issue, we can use a non-allocating \"in-place\" approach. Written out by hand, this looks like:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"function f(du, u, p)\n    du[1] = u[1] * u[1] - p\n    du[2] = u[2] * u[2] - p\n    return nothing\nend\n\nprob = NonlinearProblem(f, u0, p)\n@benchmark sol = solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Notice how much faster this already runs! We can make this code even simpler by using the .= in-place broadcasting.","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"function f(du, u, p)\n    du .= u .* u .- p\n    return nothing\nend\n\n@benchmark sol = solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/code_optimization/#Further-Optimizations-for-Small-Nonlinear-Solves-with-Static-Arrays-and-SimpleNonlinearSolve","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Further Optimizations for Small Nonlinear Solves with Static Arrays and SimpleNonlinearSolve","text":"","category":"section"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Allocations are only expensive if they are “heap allocations”. For a more in-depth definition of heap allocations, there are many sources online. But a good working definition is that heap allocations are variable-sized slabs of memory which have to be pointed to, and this pointer indirection costs time. Additionally, the heap has to be managed, and the garbage controllers has to actively keep track of what's on the heap.","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"However, there's an alternative to heap allocations, known as stack allocations. The stack is statically-sized (known at compile time) and thus its accesses are quick. Additionally, the exact block of memory is known in advance by the compiler, and thus re-using the memory is cheap. This means that allocating on the stack has essentially no cost!","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Arrays have to be heap allocated because their size (and thus the amount of memory they take up) is determined at runtime. But there are structures in Julia which are stack-allocated. structs for example are stack-allocated “value-type”s. Tuples are a stack-allocated collection. The most useful data structure for NonlinearSolve though is the StaticArray from the package StaticArrays.jl. These arrays have their length determined at compile-time. They are created using macros attached to normal array expressions, for example:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"using StaticArrays\n\nA = SA[2.0, 3.0, 5.0]\ntypeof(A)","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Notice that the 3 after SVector gives the size of the SVector. It cannot be changed. Additionally, SVectors are immutable, so we have to create a new SVector to change values. But remember, we don't have to worry about allocations because this data structure is stack-allocated. SArrays have numerous extra optimizations as well: they have fast matrix multiplication, fast QR factorizations, etc. which directly make use of the information about the size of the array. Thus, when possible, they should be used.","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Unfortunately, static arrays can only be used for sufficiently small arrays. After a certain size, they are forced to heap allocate after some instructions and their compile time balloons. Thus, static arrays shouldn't be used if your system has more than ~20 variables. Additionally, only the native Julia algorithms can fully utilize static arrays.","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Let's ***optimize our nonlinear solve using static arrays***. Note that in this case, we want to use the out-of-place allocating form, but this time we want to output a static array. Doing it with broadcasting looks like:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"f_SA(u, p) = u .* u .- p\n\nu0 = SA[1.0, 1.0]\np = 2.0\nprob = NonlinearProblem(f_SA, u0, p)\n\n@benchmark solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"Note that only change here is that u0 is made into a StaticArray! If we needed to write f out for a more complex nonlinear case, then we'd simply do the following:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"f_SA(u, p) = SA[u[1] * u[1] - p, u[2] * u[2] - p]\n\n@benchmark solve(prob, NewtonRaphson())","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"However, notice that this did not give us a speedup but rather a slowdown. This is because many of the methods in NonlinearSolve.jl are designed to scale to larger problems, and thus aggressively do things like caching which is good for large problems but not good for these smaller problems and static arrays. In order to see the full benefit, we need to move to one of the methods from SimpleNonlinearSolve.jl which are designed for these small-scale static examples. Let's now use SimpleNewtonRaphson:","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"@benchmark solve(prob, SimpleNewtonRaphson())","category":"page"},{"location":"tutorials/code_optimization/","page":"Code Optimization for Small Nonlinear Systems in Julia","title":"Code Optimization for Small Nonlinear Systems in Julia","text":"And there we go, around 40ns from our starting point of almost 4μs!","category":"page"},{"location":"tutorials/iterator_interface/#iterator","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"","category":"section"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"There is an iterator form of the nonlinear solver which somewhat mirrors the DiffEq integrator interface:","category":"page"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"using NonlinearSolve\n\nf(u, p) = u .* u .- 2.0\nu0 = 1.5\nprobB = NonlinearProblem(f, u0)\n\nnlcache = init(probB, NewtonRaphson())","category":"page"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"init takes the same keyword arguments as solve, but it returns a cache object that satisfies typeof(nlcache) <: AbstractNonlinearSolveCache and can be used to iterate the solver.","category":"page"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"The iterator interface supports:","category":"page"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"step!(nlcache::NonlinearSolve.AbstractNonlinearSolveCache, args...; kwargs...)","category":"page"},{"location":"tutorials/iterator_interface/#CommonSolve.step!-Tuple{NonlinearSolve.AbstractNonlinearSolveCache, Vararg{Any}}","page":"Nonlinear Solver Iterator Interface","title":"CommonSolve.step!","text":"step!(cache::AbstractNonlinearSolveCache;\n    recompute_jacobian::Union{Nothing, Bool} = nothing)\n\nPerforms one step of the nonlinear solver.\n\nKeyword Arguments\n\nrecompute_jacobian: allows controlling whether the jacobian is recomputed at the current step. If nothing, then the algorithm determines whether to recompute the jacobian. If true or false, then the jacobian is recomputed or not recomputed, respectively. For algorithms that don't use jacobian information, this keyword is ignored with a one-time warning.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"We can perform 10 steps of the Newton-Raphson solver with the following:","category":"page"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"for i in 1:10\n    step!(nlcache)\nend","category":"page"},{"location":"tutorials/iterator_interface/","page":"Nonlinear Solver Iterator Interface","title":"Nonlinear Solver Iterator Interface","text":"We currently don't implement a Base.iterate interface but that will be added in the future.","category":"page"},{"location":"devdocs/internal_interfaces/#Internal-Abstract-Types","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"","category":"section"},{"location":"devdocs/internal_interfaces/#Solvers","page":"Internal Abstract Types","title":"Solvers","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.AbstractNonlinearSolveAlgorithm\nNonlinearSolve.AbstractNonlinearSolveExtensionAlgorithm\nNonlinearSolve.AbstractNonlinearSolveCache","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractNonlinearSolveAlgorithm","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractNonlinearSolveAlgorithm","text":"AbstractNonlinearSolveAlgorithm{name} <: AbstractNonlinearAlgorithm\n\nAbstract Type for all NonlinearSolve.jl Algorithms. name can be used to define custom dispatches by wrapped solvers.\n\nInterface Functions\n\nconcrete_jac(alg): whether or not the algorithm uses a concrete Jacobian. Defaults to nothing.\nget_name(alg): get the name of the algorithm.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractNonlinearSolveExtensionAlgorithm","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractNonlinearSolveExtensionAlgorithm","text":"AbstractNonlinearSolveExtensionAlgorithm <: AbstractNonlinearSolveAlgorithm{:Extension}\n\nAbstract Type for all NonlinearSolve.jl Extension Algorithms, i.e. wrappers over 3rd party solvers.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractNonlinearSolveCache","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractNonlinearSolveCache","text":"AbstractNonlinearSolveCache{iip, timeit}\n\nAbstract Type for all NonlinearSolve.jl Caches.\n\nInterface Functions\n\nget_fu(cache): get the residual.\nget_u(cache): get the current state.\nset_fu!(cache, fu): set the residual.\nset_u!(cache, u): set the current state.\nreinit!(cache, u0; kwargs...): reinitialize the cache with the initial state u0 and any additional keyword arguments.\nstep!(cache; kwargs...): See SciMLBase.step! for more details.\nnot_terminated(cache): whether or not the solver has terminated.\nisinplace(cache): whether or not the solver is inplace.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#Descent-Algorithms","page":"Internal Abstract Types","title":"Descent Algorithms","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.AbstractDescentAlgorithm\nNonlinearSolve.AbstractDescentCache","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractDescentAlgorithm","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractDescentAlgorithm","text":"AbstractDescentAlgorithm\n\nGiven the Jacobian J and the residual fu, this type of algorithm computes the descent direction δu.\n\nFor non-square Jacobian problems, if we need to solve a linear solve problem, we use a least squares solver by default, unless the provided linsolve can't handle non-square matrices, in which case we use the normal form equations JᵀJ δu = Jᵀ fu. Note that this factorization is often the faster choice, but it is not as numerically stable as the least squares solver.\n\n__internal_init specification\n\n__internal_init(prob::NonlinearProblem{uType, iip}, alg::AbstractDescentAlgorithm, J,\n    fu, u; pre_inverted::Val{INV} = Val(false), linsolve_kwargs = (;),\n    abstol = nothing, reltol = nothing, alias_J::Bool = true,\n    shared::Val{N} = Val(1), kwargs...) where {INV, N, uType, iip} --> AbstractDescentCache\n\n__internal_init(\n    prob::NonlinearLeastSquaresProblem{uType, iip}, alg::AbstractDescentAlgorithm,\n    J, fu, u; pre_inverted::Val{INV} = Val(false), linsolve_kwargs = (;),\n    abstol = nothing, reltol = nothing, alias_J::Bool = true,\n    shared::Val{N} = Val(1), kwargs...) where {INV, N, uType, iip} --> AbstractDescentCache\n\npre_inverted: whether or not the Jacobian has been pre_inverted. Defaults to False. Note that for most algorithms except NewtonDescent setting it to Val(true) is generally a bad idea.\nlinsolve_kwargs: keyword arguments to pass to the linear solver. Defaults to (;).\nabstol: absolute tolerance for the linear solver. Defaults to nothing.\nreltol: relative tolerance for the linear solver. Defaults to nothing.\nalias_J: whether or not to alias the Jacobian. Defaults to true.\nshared: Store multiple descent directions in the cache. Allows efficient and correct reuse of factorizations if needed,\n\nSome of the algorithms also allow additional keyword arguments. See the documentation for the specific algorithm for more information.\n\nInterface Functions\n\nsupports_trust_region(alg): whether or not the algorithm supports trust region methods. Defaults to false.\nsupports_line_search(alg): whether or not the algorithm supports line search methods. Defaults to false.\n\nSee also NewtonDescent, Dogleg, SteepestDescent, DampedNewtonDescent.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractDescentCache","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractDescentCache","text":"AbstractDescentCache\n\nAbstract Type for all Descent Caches.\n\n__internal_solve! specification\n\ndescent_result = __internal_solve!(\n    cache::AbstractDescentCache, J, fu, u, idx::Val; skip_solve::Bool = false, kwargs...)\n\nJ: Jacobian or Inverse Jacobian (if pre_inverted = Val(true)).\nfu: residual.\nu: current state.\nidx: index of the descent problem to solve and return. Defaults to Val(1).\nskip_solve: Skip the direction computation and return the previous direction. Defaults to false. This is useful for Trust Region Methods where the previous direction was rejected and we want to try with a modified trust region.\nkwargs: keyword arguments to pass to the linear solver if there is one.\n\nReturned values\n\ndescent_result: Result in a DescentResult.\n\nInterface Functions\n\nget_du(cache): get the descent direction.\nget_du(cache, ::Val{N}): get the Nth descent direction.\nset_du!(cache, δu): set the descent direction.\nset_du!(cache, δu, ::Val{N}): set the Nth descent direction.\nlast_step_accepted(cache): whether or not the last step was accepted. Checks if the cache has a last_step_accepted field and returns it if it does, else returns true.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#Descent-Results","page":"Internal Abstract Types","title":"Descent Results","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.DescentResult","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.DescentResult","page":"Internal Abstract Types","title":"NonlinearSolve.DescentResult","text":"DescentResult(; δu = missing, u = missing, success::Bool = true,\n    linsolve_success::Bool = true, extras = (;))\n\nConstruct a DescentResult object.\n\nKeyword Arguments\n\nδu: The descent direction.\nu: The new iterate. This is provided only for multi-step methods currently.\nsuccess: Certain Descent Algorithms can reject a descent direction for example GeodesicAcceleration.\nlinsolve_success: Whether the line search was successful.\nextras: A named tuple containing intermediates computed during the solve. For example, GeodesicAcceleration returns NamedTuple{(:v, :a)} containing the \"velocity\" and \"acceleration\" terms.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#Approximate-Jacobian","page":"Internal Abstract Types","title":"Approximate Jacobian","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.AbstractApproximateJacobianStructure\nNonlinearSolve.AbstractJacobianInitialization\nNonlinearSolve.AbstractApproximateJacobianUpdateRule\nNonlinearSolve.AbstractApproximateJacobianUpdateRuleCache\nNonlinearSolve.AbstractResetCondition","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractApproximateJacobianStructure","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractApproximateJacobianStructure","text":"AbstractApproximateJacobianStructure\n\nAbstract Type for all Approximate Jacobian Structures used in NonlinearSolve.jl.\n\nInterface Functions\n\nstores_full_jacobian(alg): whether or not the algorithm stores the full Jacobian. Defaults to false.\nget_full_jacobian(cache, alg, J): get the full Jacobian. Defaults to throwing an error if stores_full_jacobian(alg) is false.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractJacobianInitialization","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractJacobianInitialization","text":"AbstractJacobianInitialization\n\nAbstract Type for all Jacobian Initialization Algorithms used in NonlinearSolve.jl.\n\nInterface Functions\n\njacobian_initialized_preinverted(alg): whether or not the Jacobian is initialized preinverted. Defaults to false.\n\n__internal_init specification\n\n__internal_init(\n    prob::AbstractNonlinearProblem, alg::AbstractJacobianInitialization, solver,\n    f::F, fu, u, p; linsolve = missing, internalnorm::IN = DEFAULT_NORM, kwargs...)\n\nReturns a NonlinearSolve.InitializedApproximateJacobianCache.\n\nAll subtypes need to define (cache::InitializedApproximateJacobianCache)(alg::NewSubType, fu, u) which reinitializes the Jacobian in cache.J.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractApproximateJacobianUpdateRule","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractApproximateJacobianUpdateRule","text":"AbstractApproximateJacobianUpdateRule{INV}\n\nAbstract Type for all Approximate Jacobian Update Rules used in NonlinearSolve.jl.\n\nInterface Functions\n\nstore_inverse_jacobian(alg): Return INV\n\n__internal_init specification\n\n__internal_init(\n    prob::AbstractNonlinearProblem, alg::AbstractApproximateJacobianUpdateRule, J,\n    fu, u, du, args...; internalnorm::F = DEFAULT_NORM, kwargs...) where {F} -->\nAbstractApproximateJacobianUpdateRuleCache{INV}\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractApproximateJacobianUpdateRuleCache","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractApproximateJacobianUpdateRuleCache","text":"AbstractApproximateJacobianUpdateRuleCache{INV}\n\nAbstract Type for all Approximate Jacobian Update Rule Caches used in NonlinearSolve.jl.\n\nInterface Functions\n\nstore_inverse_jacobian(alg): Return INV\n\n__internal_solve! specification\n\n__internal_solve!(\n    cache::AbstractApproximateJacobianUpdateRuleCache, J, fu, u, du; kwargs...) --> J / J⁻¹\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractResetCondition","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractResetCondition","text":"AbstractResetCondition\n\nCondition for resetting the Jacobian in Quasi-Newton's methods.\n\n__internal_init specification\n\n__internal_init(alg::AbstractResetCondition, J, fu, u, du, args...; kwargs...) -->\nResetCache\n\n__internal_solve! specification\n\n__internal_solve!(cache::ResetCache, J, fu, u, du) --> Bool\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#Damping-Algorithms","page":"Internal Abstract Types","title":"Damping Algorithms","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.AbstractDampingFunction\nNonlinearSolve.AbstractDampingFunctionCache","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractDampingFunction","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractDampingFunction","text":"AbstractDampingFunction\n\nAbstract Type for Damping Functions in DampedNewton.\n\n__internal_init specification\n\n__internal_init(\n    prob::AbstractNonlinearProblem, f::AbstractDampingFunction, initial_damping,\n    J, fu, u, args...; internal_norm = DEFAULT_NORM, kwargs...) -->\nAbstractDampingFunctionCache\n\nReturns a AbstractDampingFunctionCache.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractDampingFunctionCache","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractDampingFunctionCache","text":"AbstractDampingFunctionCache\n\nAbstract Type for the Caches created by AbstractDampingFunctions\n\nInterface Functions\n\nrequires_normal_form_jacobian(f): whether or not the Jacobian is needed in normal form. No default.\nrequires_normal_form_rhs(f): whether or not the residual is needed in normal form. No default.\nreturns_norm_form_damping(f): whether or not the damping function returns the damping factor in normal form. Defaults to requires_normal_form_jacobian(f) || requires_normal_form_rhs(f).\n(cache::AbstractDampingFunctionCache)(::Nothing): returns the damping factor. The type of the damping factor returned from solve! is guaranteed to be the same as this.\n\n__internal_solve! specification\n\n__internal_solve!(cache::AbstractDampingFunctionCache, J, fu, args...; kwargs...)\n\nReturns the damping factor.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#Line-Search","page":"Internal Abstract Types","title":"Line Search","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.AbstractNonlinearSolveLineSearchAlgorithm\nNonlinearSolve.AbstractNonlinearSolveLineSearchCache","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractNonlinearSolveLineSearchAlgorithm","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractNonlinearSolveLineSearchAlgorithm","text":"AbstractNonlinearSolveLineSearchAlgorithm\n\nAbstract Type for all Line Search Algorithms used in NonlinearSolve.jl.\n\n__internal_init specification\n\n__internal_init(\n    prob::AbstractNonlinearProblem, alg::AbstractNonlinearSolveLineSearchAlgorithm, f::F,\n    fu, u, p, args...; internalnorm::IN = DEFAULT_NORM, kwargs...) where {F, IN} -->\nAbstractNonlinearSolveLineSearchCache\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractNonlinearSolveLineSearchCache","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractNonlinearSolveLineSearchCache","text":"AbstractNonlinearSolveLineSearchCache\n\nAbstract Type for all Line Search Caches used in NonlinearSolve.jl.\n\n__internal_solve! specification\n\n__internal_solve!(cache::AbstractNonlinearSolveLineSearchCache, u, du; kwargs...)\n\nReturns 2 values:\n\nunsuccessful: If true it means that the Line Search Failed.\nalpha: The step size.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#Trust-Region","page":"Internal Abstract Types","title":"Trust Region","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.AbstractTrustRegionMethod\nNonlinearSolve.AbstractTrustRegionMethodCache","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractTrustRegionMethod","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractTrustRegionMethod","text":"AbstractTrustRegionMethod\n\nAbstract Type for all Trust Region Methods used in NonlinearSolve.jl.\n\n__internal_init specification\n\n__internal_init(\n    prob::AbstractNonlinearProblem, alg::AbstractTrustRegionMethod, f::F, fu, u,\n    p, args...; internalnorm::IF = DEFAULT_NORM, kwargs...) where {F, IF} -->\nAbstractTrustRegionMethodCache\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractTrustRegionMethodCache","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractTrustRegionMethodCache","text":"AbstractTrustRegionMethodCache\n\nAbstract Type for all Trust Region Method Caches used in NonlinearSolve.jl.\n\nInterface Functions\n\nlast_step_accepted(cache): whether or not the last step was accepted. Defaults to cache.last_step_accepted. Should if overloaded if the field is not present.\n\n__internal_solve! specification\n\n__internal_solve!(cache::AbstractTrustRegionMethodCache, J, fu, u, δu, descent_stats)\n\nReturns last_step_accepted, updated u_cache and fu_cache. If the last step was accepted then these values should be copied into the toplevel cache.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/internal_interfaces/#Tracing","page":"Internal Abstract Types","title":"Tracing","text":"","category":"section"},{"location":"devdocs/internal_interfaces/","page":"Internal Abstract Types","title":"Internal Abstract Types","text":"NonlinearSolve.AbstractNonlinearSolveTraceLevel","category":"page"},{"location":"devdocs/internal_interfaces/#NonlinearSolve.AbstractNonlinearSolveTraceLevel","page":"Internal Abstract Types","title":"NonlinearSolve.AbstractNonlinearSolveTraceLevel","text":"AbstractNonlinearSolveTraceLevel\n\nCommon Arguments\n\nfreq: Sets both print_frequency and store_frequency to freq.\n\nCommon Keyword Arguments\n\nprint_frequency: Print the trace every print_frequency iterations if show_trace == Val(true).\nstore_frequency: Store the trace every store_frequency iterations if store_trace == Val(true).\n\n\n\n\n\n","category":"type"},{"location":"basics/autodiff/#Automatic-Differentiation-Backends","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"","category":"section"},{"location":"basics/autodiff/#Summary-of-Finite-Differencing-Backends","page":"Automatic Differentiation Backends","title":"Summary of Finite Differencing Backends","text":"","category":"section"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"AutoFiniteDiff: Finite differencing, not optimal but always applicable.","category":"page"},{"location":"basics/autodiff/#Summary-of-Forward-Mode-AD-Backends","page":"Automatic Differentiation Backends","title":"Summary of Forward Mode AD Backends","text":"","category":"section"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"AutoForwardDiff: The best choice for dense problems.\nAutoPolyesterForwardDiff: Might be faster than AutoForwardDiff for large problems. Requires PolyesterForwardDiff.jl to be installed and loaded.","category":"page"},{"location":"basics/autodiff/#Summary-of-Reverse-Mode-AD-Backends","page":"Automatic Differentiation Backends","title":"Summary of Reverse Mode AD Backends","text":"","category":"section"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"AutoZygote: The fastest choice for non-mutating array-based (BLAS) functions.\nAutoEnzyme: Uses Enzyme.jl Reverse Mode and should be considered experimental.","category":"page"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"note: Note\nIf PolyesterForwardDiff.jl is installed and loaded, then SimpleNonlinearSolve.jl will automatically use AutoPolyesterForwardDiff as the default AD backend.","category":"page"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"note: Note\nThe sparse versions of the methods refer to automated sparsity detection. These methods automatically discover the sparse Jacobian form from the function f. Note that all methods specialize the differentiation on a sparse Jacobian if the sparse Jacobian is given as prob.f.jac_prototype in the NonlinearFunction definition, and the AutoSparse here simply refers to whether this jac_prototype should be generated automatically. For more details, see SparseDiffTools.jl and Sparsity Detection Manual Entry, as well as the documentation of ADTypes.jl.","category":"page"},{"location":"basics/autodiff/#API-Reference","page":"Automatic Differentiation Backends","title":"API Reference","text":"","category":"section"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"AutoSparse","category":"page"},{"location":"basics/autodiff/#ADTypes.AutoSparse","page":"Automatic Differentiation Backends","title":"ADTypes.AutoSparse","text":"AutoSparse(AutoEnzyme())\n\nSparse version of AutoEnzyme that uses Enzyme.jl and the row color vector of the Jacobian Matrix to efficiently compute the Sparse Jacobian.\n\nSupports both inplace and out-of-place functions\n\nThis is efficient only for long jacobians or if the maximum value of the row color vector is significantly lower than the maximum value of the column color vector.\n\nAutoSparse(AutoFiniteDiff())\n\nSparse Version of AutoFiniteDiff that uses FiniteDiff.jl and the column color vector of the Jacobian Matrix to efficiently compute the Sparse Jacobian.\n\nSupports both inplace and out-of-place functions\nAutoSparse(AutoForwardDiff(; chunksize = nothing, tag = nothing)) AutoSparse(AutoForwardDiff{chunksize, tagType}(tag::tagType))\n\nSparse Version of AutoForwardDiff that uses ForwardDiff.jl and the column color vector of the Jacobian Matrix to efficiently compute the Sparse Jacobian.\n\nSupports both inplace and out-of-place functions\n\nFor type-stability of internal operations, a positive chunksize must be provided.\n\nKeyword Arguments\n\nchunksize: Count of dual numbers that can be propagated simultaneously. Setting this number to a high value will lead to slowdowns. Use NonlinearSolve.pickchunksize to get a proper value.\ntag: Used to avoid perturbation confusion. If set to nothing, we use a custom tag.\nAutoSparse(AutoZygote())\n\nSparse version of AutoZygote that uses Zygote.jl and the row color vector of the Jacobian Matrix to efficiently compute the Sparse Jacobian.\n\nSupports only out-of-place functions\n\nThis is efficient only for long jacobians or if the maximum value of the row color vector is significantly lower than the maximum value of the column color vector.\n\n\n\n\n\n","category":"type"},{"location":"basics/autodiff/#Finite-Differencing-Backends","page":"Automatic Differentiation Backends","title":"Finite Differencing Backends","text":"","category":"section"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"AutoFiniteDiff","category":"page"},{"location":"basics/autodiff/#ADTypes.AutoFiniteDiff","page":"Automatic Differentiation Backends","title":"ADTypes.AutoFiniteDiff","text":"AutoFiniteDiff(; fdtype = Val(:forward), fdjtype = fdtype, fdhtype = Val(:hcentral))\n\nThis uses FiniteDiff.jl. While not necessarily the most efficient, this is the only choice that doesn't require the f function to be automatically differentiable, which means it applies to any choice. However, because it's using finite differencing, one needs to be careful as this procedure introduces numerical error into the derivative estimates.\n\nCompatible with GPUs\nCan be used for Jacobian-Vector Products (JVPs)\nCan be used for Vector-Jacobian Products (VJPs)\nSupports both inplace and out-of-place functions\n\nKeyword Arguments\n\nfdtype: the method used for defining the gradient\nfdjtype: the method used for defining the Jacobian of constraints.\nfdhtype: the method used for defining the Hessian\n\n\n\n\n\n","category":"type"},{"location":"basics/autodiff/#Forward-Mode-AD-Backends","page":"Automatic Differentiation Backends","title":"Forward Mode AD Backends","text":"","category":"section"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"AutoForwardDiff\nAutoPolyesterForwardDiff","category":"page"},{"location":"basics/autodiff/#ADTypes.AutoForwardDiff","page":"Automatic Differentiation Backends","title":"ADTypes.AutoForwardDiff","text":"AutoForwardDiff(; chunksize = nothing, tag = nothing)\nAutoForwardDiff{chunksize, tagType}(tag::tagType)\n\nThis uses the ForwardDiff.jl package. It is the fastest choice for square or wide systems. It is easy to use and compatible with most Julia functions which have loose type restrictions.\n\nCompatible with GPUs\nCan be used for Jacobian-Vector Products (JVPs)\nSupports both inplace and out-of-place functions\n\nFor type-stability of internal operations, a positive chunksize must be provided.\n\nKeyword Arguments\n\nchunksize: Count of dual numbers that can be propagated simultaneously. Setting this number to a high value will lead to slowdowns. Use NonlinearSolve.pickchunksize to get a proper value.\ntag: Used to avoid perturbation confusion. If set to nothing, we use a custom tag.\n\n\n\n\n\n","category":"type"},{"location":"basics/autodiff/#ADTypes.AutoPolyesterForwardDiff","page":"Automatic Differentiation Backends","title":"ADTypes.AutoPolyesterForwardDiff","text":"AutoPolyesterForwardDiff(; chunksize = nothing)\n\nUses PolyesterForwardDiff.jl to compute the jacobian. This is essentially parallelized ForwardDiff.jl.\n\nSupports both inplace and out-of-place functions\n\nKeyword Arguments\n\nchunksize: Count of dual numbers that can be propagated simultaneously. Setting this number to a high value will lead to slowdowns. Use NonlinearSolve.pickchunksize to get a proper value.\n\n\n\n\n\n","category":"type"},{"location":"basics/autodiff/#Reverse-Mode-AD-Backends","page":"Automatic Differentiation Backends","title":"Reverse Mode AD Backends","text":"","category":"section"},{"location":"basics/autodiff/","page":"Automatic Differentiation Backends","title":"Automatic Differentiation Backends","text":"AutoZygote\nAutoEnzyme","category":"page"},{"location":"basics/autodiff/#ADTypes.AutoZygote","page":"Automatic Differentiation Backends","title":"ADTypes.AutoZygote","text":"AutoZygote()\n\nUses Zygote.jl package. This is the staple reverse-mode AD that handles a large portion of Julia with good efficiency.\n\nCompatible with GPUs\nCan be used for Vector-Jacobian Products (VJPs)\nSupports only out-of-place functions\n\nFor VJPs this is the current best choice. This is the most efficient method for long jacobians.\n\n\n\n\n\n","category":"type"},{"location":"basics/autodiff/#ADTypes.AutoEnzyme","page":"Automatic Differentiation Backends","title":"ADTypes.AutoEnzyme","text":"AutoEnzyme()\n\nUses reverse mode Enzyme.jl. This is currently experimental, and not extensively tested on our end. We only support Jacobian construction and VJP support is currently not implemented.\n\nSupports both inplace and out-of-place functions\n\n\n\n\n\n","category":"type"},{"location":"tutorials/large_systems/#large_systems","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"This tutorial is for getting into the extra features of using NonlinearSolve.jl. Solving ill-conditioned nonlinear systems requires specializing the linear solver on properties of the Jacobian in order to cut down on the mathcalO(n^3) linear solve and the mathcalO(n^2) back-solves. This tutorial is designed to explain the advanced usage of NonlinearSolve.jl by solving the steady state stiff Brusselator partial differential equation (BRUSS) using NonlinearSolve.jl.","category":"page"},{"location":"tutorials/large_systems/#Definition-of-the-Brusselator-Equation","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Definition of the Brusselator Equation","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"note: Note\nFeel free to skip this section: it simply defines the example problem.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"The Brusselator PDE is defined as follows:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"beginalign\n0 = 1 + u^2v - 44u + alpha(fracpartial^2 upartial x^2 + fracpartial^2 upartial y^2) + f(x y t)\n0 = 34u - u^2v + alpha(fracpartial^2 vpartial x^2 + fracpartial^2 vpartial y^2)\nendalign","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"where","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"f(x y t) = begincases\n5  quad textif  (x-03)^2+(y-06)^2  01^2 text and  t  11 \n0  quad textelse\nendcases","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"and the initial conditions are","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"beginalign\nu(x y 0) = 22cdot (y(1-y))^32 \nv(x y 0) = 27cdot (x(1-x))^32\nendalign","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"with the periodic boundary condition","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"beginalign\nu(x+1yt) = u(xyt) \nu(xy+1t) = u(xyt)\nendalign","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"To solve this PDE, we will discretize it into a system of ODEs with the finite difference method. We discretize u and v into arrays of the values at each time point: u[i,j] = u(i*dx,j*dy) for some choice of dx/dy, and same for v. Then our ODE is defined with U[i,j,k] = [u v]. The second derivative operator, the Laplacian, discretizes to become a tridiagonal matrix with [1 -2 1] and a 1 in the top right and bottom left corners. The nonlinear functions are then applied at each point in space (they are broadcast). Use dx=dy=1/32.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"The resulting NonlinearProblem definition is:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"using NonlinearSolve, LinearAlgebra, SparseArrays, LinearSolve\n\nconst N = 32\nconst xyd_brusselator = range(0, stop = 1, length = N)\n\nbrusselator_f(x, y) = (((x - 0.3)^2 + (y - 0.6)^2) <= 0.1^2) * 5.0\nlimit(a, N) = a == N + 1 ? 1 : a == 0 ? N : a\n\nfunction brusselator_2d_loop(du, u, p)\n    A, B, alpha, dx = p\n    alpha = alpha / dx^2\n    @inbounds for I in CartesianIndices((N, N))\n        i, j = Tuple(I)\n        x, y = xyd_brusselator[I[1]], xyd_brusselator[I[2]]\n        ip1, im1, jp1, jm1 = limit(i + 1, N), limit(i - 1, N), limit(j + 1, N),\n        limit(j - 1, N)\n        du[i, j, 1] = alpha * (u[im1, j, 1] + u[ip1, j, 1] + u[i, jp1, 1] + u[i, jm1, 1] -\n                       4u[i, j, 1]) +\n                      B +\n                      u[i, j, 1]^2 * u[i, j, 2] - (A + 1) * u[i, j, 1] + brusselator_f(x, y)\n        du[i, j, 2] = alpha * (u[im1, j, 2] + u[ip1, j, 2] + u[i, jp1, 2] + u[i, jm1, 2] -\n                       4u[i, j, 2]) + A * u[i, j, 1] - u[i, j, 1]^2 * u[i, j, 2]\n    end\nend\np = (3.4, 1.0, 10.0, step(xyd_brusselator))\n\nfunction init_brusselator_2d(xyd)\n    N = length(xyd)\n    u = zeros(N, N, 2)\n    for I in CartesianIndices((N, N))\n        x = xyd[I[1]]\n        y = xyd[I[2]]\n        u[I, 1] = 22 * (y * (1 - y))^(3 / 2)\n        u[I, 2] = 27 * (x * (1 - x))^(3 / 2)\n    end\n    u\nend\n\nu0 = init_brusselator_2d(xyd_brusselator)\nprob_brusselator_2d = NonlinearProblem(\n    brusselator_2d_loop, u0, p; abstol = 1e-10, reltol = 1e-10)","category":"page"},{"location":"tutorials/large_systems/#Choosing-Jacobian-Types","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Choosing Jacobian Types","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"When we are solving this nonlinear problem, the Jacobian must be built at many iterations, and this can be one of the most expensive steps. There are two pieces that must be optimized in order to reach maximal efficiency when solving stiff equations: the sparsity pattern and the construction of the Jacobian. The construction is filling the matrix J with values, while the sparsity pattern is what J to use.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"The sparsity pattern is given by a prototype matrix, the jac_prototype, which will be copied to be used as J. The default is for J to be a Matrix, i.e. a dense matrix. However, if you know the sparsity of your problem, then you can pass a different matrix type. For example, a SparseMatrixCSC will give a sparse matrix. Other sparse matrix types include:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Bidiagonal\nTridiagonal\nSymTridiagonal\nBandedMatrix (BandedMatrices.jl)\nBlockBandedMatrix (BlockBandedMatrices.jl)","category":"page"},{"location":"tutorials/large_systems/#Approximate-Sparsity-Detection-and-Sparse-Jacobians","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Approximate Sparsity Detection & Sparse Jacobians","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"In the next section, we will show how to specify sparsity to trigger automatic sparsity detection.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"using BenchmarkTools # for @btime\n\n@btime solve(prob_brusselator_2d, NewtonRaphson());\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"using SparseConnectivityTracer\n\nprob_brusselator_2d_autosparse = NonlinearProblem(\n    NonlinearFunction(brusselator_2d_loop; sparsity = TracerSparsityDetector()),\n    u0, p; abstol = 1e-10, reltol = 1e-10)\n\n@btime solve(prob_brusselator_2d_autosparse,\n    NewtonRaphson(; autodiff = AutoForwardDiff(; chunksize = 32)));\n@btime solve(prob_brusselator_2d_autosparse,\n    NewtonRaphson(; autodiff = AutoForwardDiff(; chunksize = 32),\n        linsolve = KLUFactorization()));\n@btime solve(prob_brusselator_2d_autosparse,\n    NewtonRaphson(; autodiff = AutoForwardDiff(; chunksize = 32),\n        linsolve = KrylovJL_GMRES()));\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/#Declaring-a-Sparse-Jacobian-with-Automatic-Sparsity-Detection","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Declaring a Sparse Jacobian with Automatic Sparsity Detection","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Jacobian sparsity is declared by the jac_prototype argument in the NonlinearFunction. Note that you should only do this if the sparsity is high, for example, 0.1% of the matrix is non-zeros, otherwise the overhead of sparse matrices can be higher than the gains from sparse differentiation!","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"One of the useful companion tools for NonlinearSolve.jl is Symbolics.jl. This allows for automatic declaration of Jacobian sparsity types. To see this in action, we can give an example du and u and call jacobian_sparsity on our function with the example arguments, and it will kick out a sparse matrix with our pattern, that we can turn into our jac_prototype.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"tip: Tip\nAlternatively you can use the SparseConnectivityTracer.jl package to automatically generate a sparse Jacobian.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"using Symbolics\n\ndu0 = copy(u0)\njac_sparsity = Symbolics.jacobian_sparsity(\n    (du, u) -> brusselator_2d_loop(du, u, p), du0, u0)","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Notice that Julia gives a nice print out of the sparsity pattern. That's neat, and would be tedious to build by hand! Now we just pass it to the NonlinearFunction like as before:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"ff = NonlinearFunction(brusselator_2d_loop; jac_prototype = jac_sparsity)","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Build the NonlinearProblem:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"prob_brusselator_2d_sparse = NonlinearProblem(ff, u0, p; abstol = 1e-10, reltol = 1e-10)","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Now let's see how the version with sparsity compares to the version without:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"@btime solve(prob_brusselator_2d, NewtonRaphson());\n@btime solve(prob_brusselator_2d_sparse, NewtonRaphson());\n@btime solve(prob_brusselator_2d_sparse, NewtonRaphson(linsolve = KLUFactorization()));\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Note that depending on the properties of the sparsity pattern, one may want to try alternative linear solvers such as NewtonRaphson(linsolve = KLUFactorization()) or NewtonRaphson(linsolve = UMFPACKFactorization())","category":"page"},{"location":"tutorials/large_systems/#Using-Jacobian-Free-Newton-Krylov","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Using Jacobian-Free Newton-Krylov","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"A completely different way to optimize the linear solvers for large sparse matrices is to use a Krylov subspace method. This requires choosing a linear solver for changing to a Krylov method. To swap the linear solver out, we use the linsolve command and choose the GMRES linear solver.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"@btime solve(prob_brusselator_2d, NewtonRaphson(linsolve = KrylovJL_GMRES()));\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Notice that this acceleration does not require the definition of a sparsity pattern, and can thus be an easier way to scale for large problems. For more information on linear solver choices, see the linear solver documentation. linsolve choices are any valid LinearSolve.jl solver.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"note: Note\nSwitching to a Krylov linear solver will automatically change the nonlinear problem solver into Jacobian-free mode, dramatically reducing the memory required. This can be overridden by adding concrete_jac=true to the algorithm.","category":"page"},{"location":"tutorials/large_systems/#Adding-a-Preconditioner","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Adding a Preconditioner","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Any LinearSolve.jl-compatible preconditioner can be used as a preconditioner in the linear solver interface. To define preconditioners, one must define a precs function in compatible with nonlinear solvers which returns the left and right preconditioners, matrices which approximate the inverse of W = I - gamma*J used in the solution of the ODE. An example of this with using IncompleteLU.jl is as follows:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"# FIXME: On 1.10+ this is broken. Skipping this for now.\nusing IncompleteLU\n\nfunction incompletelu(W, du, u, p, t, newW, Plprev, Prprev, solverdata)\n    if newW === nothing || newW\n        Pl = ilu(W, τ = 50.0)\n    else\n        Pl = Plprev\n    end\n    Pl, nothing\nend\n\n@btime solve(prob_brusselator_2d_sparse,\n    NewtonRaphson(linsolve = KrylovJL_GMRES(), precs = incompletelu, concrete_jac = true));\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"Notice a few things about this preconditioner. This preconditioner uses the sparse Jacobian, and thus we set concrete_jac = true to tell the algorithm to generate the Jacobian (otherwise, a Jacobian-free algorithm is used with GMRES by default). Then newW = true whenever a new W matrix is computed, and newW = nothing during the startup phase of the solver. Thus, we do a check newW === nothing || newW and when true, it's only at these points when we update the preconditioner, otherwise we just pass on the previous version. We use convert(AbstractMatrix,W) to get the concrete W matrix (matching jac_prototype, thus SpraseMatrixCSC) which we can use in the preconditioner's definition. Then we use IncompleteLU.ilu on that sparse matrix to generate the preconditioner. We return Pl, nothing to say that our preconditioner is a left preconditioner, and that there is no right preconditioning.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"This method thus uses both the Krylov solver and the sparse Jacobian. Not only that, it is faster than both implementations! IncompleteLU is fussy in that it requires a well-tuned τ parameter. Another option is to use AlgebraicMultigrid.jl which is more automatic. The setup is very similar to before:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"using AlgebraicMultigrid\n\nfunction algebraicmultigrid(W, du, u, p, t, newW, Plprev, Prprev, solverdata)\n    if newW === nothing || newW\n        Pl = aspreconditioner(ruge_stuben(convert(AbstractMatrix, W)))\n    else\n        Pl = Plprev\n    end\n    Pl, nothing\nend\n\n@btime solve(prob_brusselator_2d_sparse,\n    NewtonRaphson(linsolve = KrylovJL_GMRES(), precs = algebraicmultigrid,\n        concrete_jac = true));\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"or with a Jacobi smoother:","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"function algebraicmultigrid2(W, du, u, p, t, newW, Plprev, Prprev, solverdata)\n    if newW === nothing || newW\n        A = convert(AbstractMatrix, W)\n        Pl = AlgebraicMultigrid.aspreconditioner(AlgebraicMultigrid.ruge_stuben(\n            A, presmoother = AlgebraicMultigrid.Jacobi(rand(size(A, 1))),\n            postsmoother = AlgebraicMultigrid.Jacobi(rand(size(A, 1)))))\n    else\n        Pl = Plprev\n    end\n    Pl, nothing\nend\n\n@btime solve(prob_brusselator_2d_sparse,\n    NewtonRaphson(linsolve = KrylovJL_GMRES(), precs = algebraicmultigrid2,\n        concrete_jac = true));\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/#Let's-compare-the-Sparsity-Detection-Methods","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Let's compare the Sparsity Detection Methods","text":"","category":"section"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"We benchmarked the solvers before with approximate and exact sparsity detection. However, for the exact sparsity detection case, we left out the time it takes to perform exact sparsity detection. Let's compare the two by setting the sparsity detection algorithms.","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"using DifferentiationInterface, SparseConnectivityTracer\n\nprob_brusselator_2d_exact_symbolics = NonlinearProblem(\n    NonlinearFunction(brusselator_2d_loop; sparsity = SymbolicsSparsityDetector()),\n    u0, p; abstol = 1e-10, reltol = 1e-10)\nprob_brusselator_2d_exact_tracer = NonlinearProblem(\n    NonlinearFunction(brusselator_2d_loop; sparsity = TracerSparsityDetector()),\n    u0, p; abstol = 1e-10, reltol = 1e-10)\nprob_brusselator_2d_approx_di = NonlinearProblem(\n    NonlinearFunction(brusselator_2d_loop;\n        sparsity = DenseSparsityDetector(AutoForwardDiff(); atol = 1e-4)),\n    u0, p; abstol = 1e-10, reltol = 1e-10)\n\n@btime solve(prob_brusselator_2d_exact_symbolics, NewtonRaphson());\n@btime solve(prob_brusselator_2d_exact_tracer, NewtonRaphson());\n@btime solve(prob_brusselator_2d_approx_di, NewtonRaphson());\nnothing # hide","category":"page"},{"location":"tutorials/large_systems/","page":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","title":"Efficiently Solving Large Sparse Ill-Conditioned Nonlinear Systems in Julia","text":"For more information on the preconditioner interface, see the linear solver documentation.","category":"page"},{"location":"devdocs/algorithm_helpers/#Internal-Algorithm-Helpers","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/#Pseudo-Transient-Method","page":"Internal Algorithm Helpers","title":"Pseudo Transient Method","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.SwitchedEvolutionRelaxation\nNonlinearSolve.SwitchedEvolutionRelaxationCache","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.SwitchedEvolutionRelaxation","page":"Internal Algorithm Helpers","title":"NonlinearSolve.SwitchedEvolutionRelaxation","text":"SwitchedEvolutionRelaxation()\n\nMethod for updating the damping parameter in the PseudoTransient method based on \"switched evolution relaxation\" [8] SER method.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.SwitchedEvolutionRelaxationCache","page":"Internal Algorithm Helpers","title":"NonlinearSolve.SwitchedEvolutionRelaxationCache","text":"SwitchedEvolutionRelaxationCache <: AbstractDampingFunctionCache\n\nCache for the SwitchedEvolutionRelaxation method.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Approximate-Jacobian-Methods","page":"Internal Algorithm Helpers","title":"Approximate Jacobian Methods","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/#Initialization","page":"Internal Algorithm Helpers","title":"Initialization","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.IdentityInitialization\nNonlinearSolve.TrueJacobianInitialization\nNonlinearSolve.BroydenLowRankInitialization","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.IdentityInitialization","page":"Internal Algorithm Helpers","title":"NonlinearSolve.IdentityInitialization","text":"IdentityInitialization(alpha, structure)\n\nInitialize the Jacobian to be an Identity Matrix scaled by alpha and maintain the structure as specified by structure.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.TrueJacobianInitialization","page":"Internal Algorithm Helpers","title":"NonlinearSolve.TrueJacobianInitialization","text":"TrueJacobianInitialization(structure, autodiff)\n\nInitialize the Jacobian to be the true Jacobian and maintain the structure as specified by structure. autodiff is used to compute the true Jacobian and if not specified we make a selection automatically.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.BroydenLowRankInitialization","page":"Internal Algorithm Helpers","title":"NonlinearSolve.BroydenLowRankInitialization","text":"BroydenLowRankInitialization{T}(alpha, threshold::Val{T})\n\nAn initialization for LimitedMemoryBroyden that uses a low rank approximation of the Jacobian. The low rank updates to the Jacobian matrix corresponds to what SciPy calls \"simple\".\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Jacobian-Structure","page":"Internal Algorithm Helpers","title":"Jacobian Structure","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.FullStructure\nNonlinearSolve.DiagonalStructure","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.FullStructure","page":"Internal Algorithm Helpers","title":"NonlinearSolve.FullStructure","text":"FullStructure()\n\nStores the full matrix.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.DiagonalStructure","page":"Internal Algorithm Helpers","title":"NonlinearSolve.DiagonalStructure","text":"DiagonalStructure()\n\nPreserves only the Diagonal of the Matrix.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Jacobian-Caches","page":"Internal Algorithm Helpers","title":"Jacobian Caches","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.InitializedApproximateJacobianCache","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.InitializedApproximateJacobianCache","page":"Internal Algorithm Helpers","title":"NonlinearSolve.InitializedApproximateJacobianCache","text":"InitializedApproximateJacobianCache(J, structure, alg, cache, initialized::Bool,\n    internalnorm)\n\nA cache for Approximate Jacobian.\n\nArguments\n\nJ: The current Jacobian.\nstructure: The structure of the Jacobian.\nalg: The initialization algorithm.\ncache: The Jacobian cache NonlinearSolve.JacobianCache (if needed).\ninitialized: A boolean indicating whether the Jacobian has been initialized.\ninternalnorm: The norm to be used.\n\nInterface\n\n(cache::InitializedApproximateJacobianCache)(::Nothing)\n\nReturns the current Jacobian cache.J with the proper structure.\n\n__internal_solve!(cache::InitializedApproximateJacobianCache, fu, u, ::Val{reinit})\n\nSolves for the Jacobian cache.J and returns it. If reinit is true, then the Jacobian is reinitialized.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Reset-Methods","page":"Internal Algorithm Helpers","title":"Reset Methods","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.NoChangeInStateReset\nNonlinearSolve.IllConditionedJacobianReset","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.NoChangeInStateReset","page":"Internal Algorithm Helpers","title":"NonlinearSolve.NoChangeInStateReset","text":"NoChangeInStateReset(; nsteps::Int = 3, reset_tolerance = nothing,\n    check_du::Bool = true, check_dfu::Bool = true)\n\nRecommends a reset if the state or the function value has not changed significantly in nsteps steps. This is used in Broyden.\n\nKeyword Arguments\n\nnsteps: the number of steps to check for no change. Defaults to 3.\nreset_tolerance: the tolerance for the reset check. Defaults to sqrt(eps(real(eltype(u)))).\ncheck_du: whether to check the state. Defaults to true.\ncheck_dfu: whether to check the function value. Defaults to true.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.IllConditionedJacobianReset","page":"Internal Algorithm Helpers","title":"NonlinearSolve.IllConditionedJacobianReset","text":"IllConditionedJacobianReset()\n\nRecommend resetting the Jacobian if the current jacobian is ill-conditioned. This is used in Klement.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Update-Rules","page":"Internal Algorithm Helpers","title":"Update Rules","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.GoodBroydenUpdateRule\nNonlinearSolve.BadBroydenUpdateRule\nNonlinearSolve.KlementUpdateRule","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.GoodBroydenUpdateRule","page":"Internal Algorithm Helpers","title":"NonlinearSolve.GoodBroydenUpdateRule","text":"GoodBroydenUpdateRule()\n\nBroyden Update Rule corresponding to \"good broyden's method\" [3].\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.BadBroydenUpdateRule","page":"Internal Algorithm Helpers","title":"NonlinearSolve.BadBroydenUpdateRule","text":"BadBroydenUpdateRule()\n\nBroyden Update Rule corresponding to \"bad broyden's method\" [3].\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.KlementUpdateRule","page":"Internal Algorithm Helpers","title":"NonlinearSolve.KlementUpdateRule","text":"KlementUpdateRule()\n\nUpdate rule for Klement.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Levenberg-Marquardt-Method","page":"Internal Algorithm Helpers","title":"Levenberg Marquardt Method","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.LevenbergMarquardtTrustRegion","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.LevenbergMarquardtTrustRegion","page":"Internal Algorithm Helpers","title":"NonlinearSolve.LevenbergMarquardtTrustRegion","text":"LevenbergMarquardtTrustRegion(b_uphill)\n\nTrust Region method for LevenbergMarquardt. This method is tightly coupled with the Levenberg-Marquardt method and works by directly updating the damping parameter instead of specifying a trust region radius.\n\nArguments\n\nb_uphill: a factor that determines if a step is accepted or rejected. The standard choice in the Levenberg-Marquardt method is to accept all steps that decrease the cost and reject all steps that increase the cost. Although this is a natural and safe choice, it is often not the most efficient. Therefore downhill moves are always accepted, but uphill moves are only conditionally accepted. To decide whether an uphill move will be accepted at each iteration i, we compute beta_i = cos(v_textnew v_textold), which denotes the cosine angle between the proposed velocity v_textnew and the velocity of the last accepted step v_textold. The idea is to accept uphill moves if the angle is small. To specify, uphill moves are accepted if (1-beta_i)^b_textuphill C_i+1 le C_i, where C_i is the cost at iteration i. Reasonable choices for b_uphill are 1.0 or 2.0, with b_uphill = 2.0 allowing higher uphill moves than b_uphill = 1.0. When b_uphill = 0.0, no uphill moves will be accepted. Defaults to 1.0. See Section 4 of Transtrum and Sethna [1].\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Trust-Region-Method","page":"Internal Algorithm Helpers","title":"Trust Region Method","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"NonlinearSolve.GenericTrustRegionScheme","category":"page"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.GenericTrustRegionScheme","page":"Internal Algorithm Helpers","title":"NonlinearSolve.GenericTrustRegionScheme","text":"GenericTrustRegionScheme(; method = RadiusUpdateSchemes.Simple,\n    max_trust_radius = nothing, initial_trust_radius = nothing,\n    step_threshold = nothing, shrink_threshold = nothing, expand_threshold = nothing,\n    shrink_factor = nothing, expand_factor = nothing, forward_ad = nothing,\n    reverse_ad = nothing)\n\nTrust Region Method that updates and stores the current trust region radius in trust_region. For any of the keyword arguments, if the value is nothing, then we use the value used in the respective paper.\n\nKeyword Arguments\n\nradius_update_scheme: the choice of radius update scheme to be used. Defaults to RadiusUpdateSchemes.Simple which follows the conventional approach. Other available schemes are documented in RadiusUpdateSchemes,. These schemes have the trust region radius converging to zero that is seen to improve convergence. For more details, see [1].\nmax_trust_radius: the maximal trust region radius. Defaults to max(norm(fu), maximum(u) - minimum(u)), except for RadiusUpdateSchemes.NLsolve where it defaults to Inf.\ninitial_trust_radius: the initial trust region radius. Defaults to max_trust_radius / 11, except for RadiusUpdateSchemes.NLsolve where it defaults to u0_norm > 0 ? u0_norm : 1.\nstep_threshold: the threshold for taking a step. In every iteration, the threshold is compared with a value r, which is the actual reduction in the objective function divided by the predicted reduction. If step_threshold > r the model is not a good approximation, and the step is rejected. Defaults to nothing.\nshrink_threshold: the threshold for shrinking the trust region radius. In every iteration, the threshold is compared with a value r which is the actual reduction in the objective function divided by the predicted reduction. If shrink_threshold > r the trust region radius is shrunk by shrink_factor. Defaults to nothing.\nexpand_threshold: the threshold for expanding the trust region radius. If a step is taken, i.e step_threshold < r (with r defined in shrink_threshold), a check is also made to see if expand_threshold < r. If that is true, the trust region radius is expanded by expand_factor. Defaults to nothing.\nshrink_factor: the factor to shrink the trust region radius with if shrink_threshold > r (with r defined in shrink_threshold). Defaults to 0.25.\nexpand_factor: the factor to expand the trust region radius with if expand_threshold < r (with r defined in shrink_threshold). Defaults to 2.0.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/algorithm_helpers/#Miscellaneous","page":"Internal Algorithm Helpers","title":"Miscellaneous","text":"","category":"section"},{"location":"devdocs/algorithm_helpers/","page":"Internal Algorithm Helpers","title":"Internal Algorithm Helpers","text":"SimpleNonlinearSolve.__nextfloat_tdir\nSimpleNonlinearSolve.__prevfloat_tdir\nSimpleNonlinearSolve.__max_tdir\nNonlinearSolve.callback_into_cache!\nNonlinearSolve.concrete_jac","category":"page"},{"location":"devdocs/algorithm_helpers/#SimpleNonlinearSolve.__nextfloat_tdir","page":"Internal Algorithm Helpers","title":"SimpleNonlinearSolve.__nextfloat_tdir","text":"__nextfloat_tdir(x, x0, x1)\n\nMove x one floating point towards x1.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/algorithm_helpers/#SimpleNonlinearSolve.__prevfloat_tdir","page":"Internal Algorithm Helpers","title":"SimpleNonlinearSolve.__prevfloat_tdir","text":"__prevfloat_tdir(x, x0, x1)\n\nMove x one floating point towards x0.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/algorithm_helpers/#SimpleNonlinearSolve.__max_tdir","page":"Internal Algorithm Helpers","title":"SimpleNonlinearSolve.__max_tdir","text":"__max_tdir(a, b, x0, x1)\n\nReturn the maximum of a and b if x1 > x0, otherwise return the minimum.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.callback_into_cache!","page":"Internal Algorithm Helpers","title":"NonlinearSolve.callback_into_cache!","text":"callback_into_cache!(cache, internalcache, args...)\n\nDefine custom operations on internalcache tightly coupled with the calling cache. args... contain the sequence of caches calling into internalcache.\n\nThis unfortunately makes code very tightly coupled and not modular. It is recommended to not use this functionality unless it can't be avoided (like in LevenbergMarquardt).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/algorithm_helpers/#NonlinearSolve.concrete_jac","page":"Internal Algorithm Helpers","title":"NonlinearSolve.concrete_jac","text":"concrete_jac(alg::AbstractNonlinearSolveAlgorithm)\n\nWhether the algorithm uses a concrete Jacobian. Defaults to nothing if it is unknown or not applicable. Else a boolean value is returned.\n\n\n\n\n\n","category":"function"},{"location":"basics/solve/#solver_options","page":"Common Solver Options (Solve Keyword Arguments)","title":"Common Solver Options (Solve Keyword Arguments)","text":"","category":"section"},{"location":"basics/solve/","page":"Common Solver Options (Solve Keyword Arguments)","title":"Common Solver Options (Solve Keyword Arguments)","text":"solve(prob::SciMLBase.NonlinearProblem, args...; kwargs...)","category":"page"},{"location":"basics/solve/#CommonSolve.solve-Tuple{NonlinearProblem, Vararg{Any}}","page":"Common Solver Options (Solve Keyword Arguments)","title":"CommonSolve.solve","text":"solve(prob::NonlinearProblem, alg::Union{AbstractNonlinearAlgorithm,Nothing}; kwargs...)\n\nArguments\n\nThe only positional argument is alg which is optional. By default, alg = nothing. If alg = nothing, then solve dispatches to the NonlinearSolve.jl automated algorithm selection (if using NonlinearSolve was done, otherwise it will error with a MethodError).\n\nKeyword Arguments\n\nThe NonlinearSolve.jl universe has a large set of common arguments available for the solve function. These arguments apply to solve on any problem type and are only limited by limitations of the specific implementations.\n\nMany of the defaults depend on the algorithm or the package the algorithm derives from. Not all of the interface is provided by every algorithm. For more detailed information on the defaults and the available options for specific algorithms / packages, see the manual pages for the solvers of specific problems.\n\nError Control\n\nabstol: Absolute tolerance.\nreltol: Relative tolerance.\n\nMiscellaneous\n\nmaxiters: Maximum number of iterations before stopping. Defaults to 1e5.\nverbose: Toggles whether warnings are thrown when the solver exits early. Defaults to true.\n\nSensitivity Algorithms (sensealg)\n\nsensealg is used for choosing the way the automatic differentiation is performed.     For more information, see the documentation for SciMLSensitivity:     https://docs.sciml.ai/SciMLSensitivity/stable/\n\n\n\n\n\n","category":"method"},{"location":"basics/solve/#General-Controls","page":"Common Solver Options (Solve Keyword Arguments)","title":"General Controls","text":"","category":"section"},{"location":"basics/solve/","page":"Common Solver Options (Solve Keyword Arguments)","title":"Common Solver Options (Solve Keyword Arguments)","text":"alias_u0::Bool: Whether to alias the initial condition or use a copy. Defaults to false.\ninternalnorm::Function: The norm used by the solver. Default depends on algorithm choice.","category":"page"},{"location":"basics/solve/#Iteration-Controls","page":"Common Solver Options (Solve Keyword Arguments)","title":"Iteration Controls","text":"","category":"section"},{"location":"basics/solve/","page":"Common Solver Options (Solve Keyword Arguments)","title":"Common Solver Options (Solve Keyword Arguments)","text":"maxiters::Int: The maximum number of iterations to perform. Defaults to 1000.\nmaxtime: The maximum time for solving the nonlinear system of equations. Defaults to nothing which means no time limit. Note that setting a time limit does have a small overhead.\nabstol::Number: The absolute tolerance. Defaults to real(oneunit(T)) * (eps(real(one(T))))^(4 // 5).\nreltol::Number: The relative tolerance. Defaults to real(oneunit(T)) * (eps(real(one(T))))^(4 // 5).\ntermination_condition: Termination Condition from DiffEqBase. Defaults to AbsSafeBestTerminationMode() for NonlinearSolve.jl and AbsTerminateMode() for SimpleNonlinearSolve.jl.","category":"page"},{"location":"basics/solve/#Tracing-Controls","page":"Common Solver Options (Solve Keyword Arguments)","title":"Tracing Controls","text":"","category":"section"},{"location":"basics/solve/","page":"Common Solver Options (Solve Keyword Arguments)","title":"Common Solver Options (Solve Keyword Arguments)","text":"These are exclusively available for native NonlinearSolve.jl solvers.","category":"page"},{"location":"basics/solve/","page":"Common Solver Options (Solve Keyword Arguments)","title":"Common Solver Options (Solve Keyword Arguments)","text":"show_trace: Must be Val(true) or Val(false). This controls whether the trace is displayed to the console. (Defaults to Val(false))\ntrace_level: Needs to be one of Trace Objects: TraceMinimal, TraceWithJacobianConditionNumber, or TraceAll. This controls the level of detail of the trace. (Defaults to TraceMinimal())\nstore_trace: Must be Val(true) or Val(false). This controls whether the trace is stored in the solution object. (Defaults to Val(false))","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#Nonlinear-Least-Squares-Solvers","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"solve(prob::NonlinearLeastSquaresProblem, alg; kwargs...)","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"Solves the nonlinear least squares problem defined by prob using the algorithm alg. If no algorithm is given, a default algorithm will be chosen.","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#Recommended-Methods","page":"Nonlinear Least Squares Solvers","title":"Recommended Methods","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"The default method FastShortcutNLLSPolyalg is a good choice for most problems. It is a polyalgorithm that attempts to use a fast algorithm (GaussNewton) and if that fails it falls back to a more robust algorithms (LevenbergMarquardt, TrustRegion).","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#Full-List-of-Methods","page":"Nonlinear Least Squares Solvers","title":"Full List of Methods","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/#NonlinearSolve.jl","page":"Nonlinear Least Squares Solvers","title":"NonlinearSolve.jl","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"LevenbergMarquardt(): An advanced Levenberg-Marquardt implementation with the improvements suggested in the Transtrum and Sethna [1]. Designed for large-scale and numerically-difficult nonlinear systems.\nGaussNewton(): A Gauss-Newton method with swappable nonlinear solvers and autodiff methods for high performance on large and sparse systems.\nTrustRegion(): A Newton Trust Region dogleg method with swappable nonlinear solvers and autodiff methods for high performance on large and sparse systems.","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#SimpleNonlinearSolve.jl","page":"Nonlinear Least Squares Solvers","title":"SimpleNonlinearSolve.jl","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"These methods are included with NonlinearSolve.jl by default, though SimpleNonlinearSolve.jl can be used  directly to reduce dependencies and improve load times. SimpleNonlinearSolve.jl's methods excel at small problems and problems defined with static arrays.","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"SimpleGaussNewton(): Simple Gauss Newton implementation using QR factorizations for numerical stability (aliased to SimpleNewtonRaphson).","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#fastlm_wrapper_summary","page":"Nonlinear Least Squares Solvers","title":"FastLevenbergMarquardt.jl","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"A wrapper over FastLevenbergMarquardt.jl. Note that it is called FastLevenbergMarquardt since the original package is called \"Fast\", though benchmarks demonstrate LevenbergMarquardt() usually outperforms.","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"FastLevenbergMarquardtJL(linsolve = :cholesky), can also choose linsolve = :qr.","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#lso_wrapper_summary","page":"Nonlinear Least Squares Solvers","title":"LeastSquaresOptim.jl","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"A wrapper over LeastSquaresOptim.jl. Has a core algorithm LeastSquaresOptimJL(alg; linsolve) where the choices for alg are:","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":":lm a Levenberg-Marquardt implementation\n:dogleg a trust-region dogleg Gauss-Newton","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"And the choices for linsolve are:","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":":qr\n:cholesky\n:lsmr a conjugate gradient method (LSMR with diagonal preconditioner).","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#MINPACK.jl","page":"Nonlinear Least Squares Solvers","title":"MINPACK.jl","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"MINPACK.jl methods are fine for medium-sized nonlinear solves. They are the FORTRAN standard methods which are used in many places, such as SciPy. However, our benchmarks demonstrate that these methods are not robust or stable. In addition, they are slower than the standard methods and do not scale due to lack of sparse Jacobian support. Thus they are only recommended for benchmarking and testing code conversions.","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"CMINPACK(): A wrapper for using the classic MINPACK method through MINPACK.jl","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"Submethod choices for this algorithm include:","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":":hybr: Modified version of Powell's algorithm.\n:lm: Levenberg-Marquardt.\n:lmdif: Advanced Levenberg-Marquardt\n:hybrd: Advanced modified version of Powell's algorithm","category":"page"},{"location":"solvers/nonlinear_least_squares_solvers/#Optimization.jl","page":"Nonlinear Least Squares Solvers","title":"Optimization.jl","text":"","category":"section"},{"location":"solvers/nonlinear_least_squares_solvers/","page":"Nonlinear Least Squares Solvers","title":"Nonlinear Least Squares Solvers","text":"NonlinearLeastSquaresProblems can be converted into an OptimizationProblem  and used with any solver of Optimization.jl.","category":"page"},{"location":"devdocs/linear_solve/#Linear-Solve","page":"Linear Solve","title":"Linear Solve","text":"","category":"section"},{"location":"devdocs/linear_solve/","page":"Linear Solve","title":"Linear Solve","text":"NonlinearSolve.AbstractLinearSolverCache\nNonlinearSolve.LinearSolverCache","category":"page"},{"location":"devdocs/linear_solve/#NonlinearSolve.AbstractLinearSolverCache","page":"Linear Solve","title":"NonlinearSolve.AbstractLinearSolverCache","text":"AbstractLinearSolverCache <: Function\n\nAbstract Type for all Linear Solvers used in NonlinearSolve.jl.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/linear_solve/#NonlinearSolve.LinearSolverCache","page":"Linear Solve","title":"NonlinearSolve.LinearSolverCache","text":"LinearSolverCache(alg, linsolve, A, b, u; stats, kwargs...)\n\nConstruct a cache for solving linear systems of the form A * u = b. Following cases are handled:\n\nA is Number, then we solve it with u = b / A\nA is SMatrix, then we solve it with u = A \\ b (using the defaults from base Julia)\nA is Diagonal, then we solve it with u = b ./ A.diag\nIn all other cases, we use alg to solve the linear system using LinearSolve.jl.\n\nSolving the System\n\n(cache::LinearSolverCache)(;\n    A = nothing, b = nothing, linu = nothing, du = nothing, p = nothing,\n    weight = nothing, cachedata = nothing, reuse_A_if_factorization = false, kwargs...)\n\nReturns the solution of the system u and stores the updated cache in cache.lincache.\n\nSpecial Handling for Rank-deficient Matrix A\n\nIf we detect a failure in the linear solve (mostly due to using an algorithm that doesn't support rank-deficient matrices), we emit a warning and attempt to solve the problem using Pivoted QR factorization. This is quite efficient if there are only a few rank-deficient that originate in the problem. However, if these are quite frequent for the main nonlinear system, then it is recommended to use a different linear solver that supports rank-deficient matrices.\n\nKeyword Arguments\n\nreuse_A_if_factorization: If true, then the factorization of A is reused if possible. This is useful when solving the same system with different b values. If the algorithm is an iterative solver, then we reset the internal linear solve cache.\n\nOne distinct feature of this compared to the cache from LinearSolve is that it respects the aliasing arguments even after cache construction, i.e., if we passed in an A that A is not mutated, we do this by copying over A to a preconstructed cache.\n\n\n\n\n\n","category":"type"},{"location":"api/fastlevenbergmarquardt/#FastLevenbergMarquardt.jl","page":"FastLevenbergMarquardt.jl","title":"FastLevenbergMarquardt.jl","text":"","category":"section"},{"location":"api/fastlevenbergmarquardt/","page":"FastLevenbergMarquardt.jl","title":"FastLevenbergMarquardt.jl","text":"This is an extension for importing solvers from FastLevenbergMarquardt.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/fastlevenbergmarquardt/","page":"FastLevenbergMarquardt.jl","title":"FastLevenbergMarquardt.jl","text":"using Pkg\nPkg.add(\"FastLevenbergMarquardt\")\nusing FastLevenbergMarquardt, NonlinearSolve","category":"page"},{"location":"api/fastlevenbergmarquardt/#Solver-API","page":"FastLevenbergMarquardt.jl","title":"Solver API","text":"","category":"section"},{"location":"api/fastlevenbergmarquardt/","page":"FastLevenbergMarquardt.jl","title":"FastLevenbergMarquardt.jl","text":"FastLevenbergMarquardtJL","category":"page"},{"location":"api/fastlevenbergmarquardt/#NonlinearSolve.FastLevenbergMarquardtJL","page":"FastLevenbergMarquardt.jl","title":"NonlinearSolve.FastLevenbergMarquardtJL","text":"FastLevenbergMarquardtJL(linsolve::Symbol = :cholesky; factor = 1e-6,\n    factoraccept = 13.0, factorreject = 3.0, factorupdate = :marquardt,\n    minscale = 1e-12, maxscale = 1e16, minfactor = 1e-28, maxfactor = 1e32,\n    autodiff = nothing)\n\nWrapper over FastLevenbergMarquardt.jl for solving NonlinearLeastSquaresProblem. For details about the other keyword arguments see the documentation for FastLevenbergMarquardt.jl.\n\nwarning: Warning\nThis is not really the fastest solver. It is called that since the original package is called \"Fast\". LevenbergMarquardt() is almost always a better choice.\n\nArguments\n\nlinsolve: Linear solver to use. Can be :qr or :cholesky.\n\nKeyword Arguments\n\nautodiff: determines the backend used for the Jacobian. Note that this argument is ignored if an analytical Jacobian is passed, as that will be used instead. Defaults to nothing which means that a default is selected according to the problem specification!\n\nnote: Note\nThis algorithm is only available if FastLevenbergMarquardt.jl is installed.\n\n\n\n\n\n","category":"type"},{"location":"release_notes/#Release-Notes","page":"Release Notes","title":"Release Notes","text":"","category":"section"},{"location":"release_notes/#Breaking-Changes-in-NonlinearSolve.jl-v3","page":"Release Notes","title":"Breaking Changes in NonlinearSolve.jl v3","text":"","category":"section"},{"location":"release_notes/","page":"Release Notes","title":"Release Notes","text":"GeneralBroyden and GeneralKlement have been renamed to Broyden and Klement respectively.\nCompat for SimpleNonlinearSolve has been bumped to v1.\nThe old style of specifying autodiff with chunksize, standardtag, etc. has been deprecated in favor of directly specifying the autodiff type, like AutoForwardDiff.","category":"page"},{"location":"release_notes/#Breaking-Changes-in-SimpleNonlinearSolve.jl-v1","page":"Release Notes","title":"Breaking Changes in SimpleNonlinearSolve.jl v1","text":"","category":"section"},{"location":"release_notes/","page":"Release Notes","title":"Release Notes","text":"Batched solvers have been removed in favor of BatchedArrays.jl. Stay tuned for detailed tutorials on how to use BatchedArrays.jl with NonlinearSolve & SimpleNonlinearSolve solvers.\nThe old style of specifying autodiff with chunksize, standardtag, etc. has been deprecated in favor of directly specifying the autodiff type, like AutoForwardDiff.\nBroyden and Klement have been renamed to SimpleBroyden and SimpleKlement to avoid conflicts with NonlinearSolve.jl's GeneralBroyden and GeneralKlement, which will be renamed to Broyden and Klement in the future.\nLBroyden has been renamed to SimpleLimitedMemoryBroyden to make it consistent with NonlinearSolve.jl's LimitedMemoryBroyden.","category":"page"},{"location":"solvers/nonlinear_system_solvers/#nonlinearsystemsolvers","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"solve(prob::NonlinearProblem, alg; kwargs...)","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"Solves for f(u) = 0 in the problem defined by prob using the algorithm alg. If no algorithm is given, a default algorithm will be chosen.","category":"page"},{"location":"solvers/nonlinear_system_solvers/#Recommended-Methods","page":"Nonlinear System Solvers","title":"Recommended Methods","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"The default method FastShortcutNonlinearPolyalg is a good choice for most problems. It is a polyalgorithm that attempts to use a fast algorithm (Klement, Broyden) and if that fails it falls back to a more robust algorithm (NewtonRaphson) before falling back the most robust variant of TrustRegion. For basic problems this will be very fast, for harder problems it will make sure to work.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"If one is looking for more robustness then RobustMultiNewton is a good choice. It attempts a set of the most robust methods in succession and only fails if all of the methods fail to converge. Additionally, DynamicSS can be a good choice for high stability if the root corresponds to a stable equilibrium.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"As a balance, NewtonRaphson is a good choice for most problems that aren't too difficult yet need high performance, and  TrustRegion is a bit less performant but more stable. If the problem is well-conditioned, Klement or Broyden may be faster, but highly dependent on the eigenvalues of the Jacobian being sufficiently small.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"NewtonRaphson and TrustRegion are designed for for large systems. They can make use of sparsity patterns for sparse automatic differentiation and sparse linear solving of very large systems. Meanwhile, SimpleNewtonRaphson and SimpleTrustRegion are implementations which are specialized for small equations. They are non-allocating on static arrays and thus really well-optimized for small systems, thus usually outperforming the other methods when such types are used for u0. Additionally, these solvers can be used inside GPU kernels. See PSOGPU.jl for an example of this.","category":"page"},{"location":"solvers/nonlinear_system_solvers/#Full-List-of-Methods","page":"Nonlinear System Solvers","title":"Full List of Methods","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"note: Note\nFor the full details on the capabilities and constructors of the different solvers, see the Detailed Solver APIs section!","category":"page"},{"location":"solvers/nonlinear_system_solvers/#NonlinearSolve.jl","page":"Nonlinear System Solvers","title":"NonlinearSolve.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"These are the core solvers, which excel at large-scale problems that need advanced linear solver, automatic differentiation, abstract array types, GPU, sparse/structured matrix support, etc. These methods support the largest set of types and features, but have a bit of overhead on very small problems.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"NewtonRaphson(): A Newton-Raphson method with swappable nonlinear solvers and autodiff methods for high performance on large and sparse systems.\nTrustRegion(): A Newton Trust Region dogleg method with swappable nonlinear solvers and autodiff methods for high performance on large and sparse systems.\nLevenbergMarquardt(): An advanced Levenberg-Marquardt implementation with the improvements suggested in the Transtrum and Sethna [1]. Designed for large-scale and numerically-difficult nonlinear systems.\nPseudoTransient(): A pseudo-transient method which mixes the stability of Euler-type stepping with the convergence speed of a Newton method. Good for highly unstable systems.\nRobustMultiNewton(): A polyalgorithm that mixes highly robust methods (line searches and trust regions) in order to be as robust as possible for difficult problems. If this method fails to converge, then one can be pretty certain that most (all?) other choices would likely fail.\nFastShortcutNonlinearPolyalg(): The default method. A polyalgorithm that mixes fast methods with fallbacks to robust methods to allow for solving easy problems quickly without sacrificing robustness on the hard problems.\nBroyden(): Generalization of Broyden's Quasi-Newton Method with Line Search and Automatic Jacobian Resetting. This is a fast method but unstable when the condition number of the Jacobian matrix is sufficiently large.\nKlement(): Generalization of Klement's Quasi-Newton Method with Line Search and Automatic Jacobian Resetting. This is a fast method but unstable when the condition number of the Jacobian matrix is sufficiently large.\nLimitedMemoryBroyden(): An advanced version of SimpleLimitedMemoryBroyden which uses a limited memory Broyden method. This is a fast method but unstable when the condition number of the Jacobian matrix is sufficiently large. It is recommended to use Broyden or Klement instead unless the memory usage is a concern.","category":"page"},{"location":"solvers/nonlinear_system_solvers/#SimpleNonlinearSolve.jl","page":"Nonlinear System Solvers","title":"SimpleNonlinearSolve.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"These methods are included with NonlinearSolve.jl by default, though SimpleNonlinearSolve.jl can be used directly to reduce dependencies and improve load times. SimpleNonlinearSolve.jl's methods excel at small problems and problems defined with static arrays.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"SimpleNewtonRaphson(): A simplified implementation of the Newton-Raphson method.\nSimpleBroyden(): The classic Broyden's quasi-Newton method.\nSimpleLimitedMemoryBroyden(): A low-memory Broyden implementation, similar to L-BFGS. This method is common in machine learning contexts but is known to be unstable in comparison to many other choices.\nSimpleKlement(): A quasi-Newton method due to Klement. It's supposed to be more efficient than Broyden's method, and it seems to be in the cases that have been tried, but more benchmarking is required.\nSimpleTrustRegion(): A dogleg trust-region Newton method. Improved globalizing stability for more robust fitting over basic Newton methods, though potentially with a cost.\nSimpleDFSane(): A low-overhead implementation of the df-sane method for solving large-scale nonlinear systems of equations.\nSimpleHalley(): A low-overhead implementation of the Halley method. This is a higher order method and thus can converge faster to low tolerances than a Newton method. Requires higher order derivatives, so best used when automatic differentiation is available.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"note: Note\nWhen used with certain types for the states u such as a Number or StaticArray, these solvers are very efficient and non-allocating. These implementations are thus well-suited for small systems of equations.","category":"page"},{"location":"solvers/nonlinear_system_solvers/#SteadyStateDiffEq.jl","page":"Nonlinear System Solvers","title":"SteadyStateDiffEq.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"SteadyStateDiffEq.jl uses ODE solvers to iteratively approach the steady state. It is a very stable method for solving nonlinear systems with stable equilibrium points, though often more computationally expensive than direct methods.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"DynamicSS(): Uses an ODE solver to find the steady state. Automatically terminates when close to the steady state.\nSSRootfind(): Uses a NonlinearSolve compatible solver to find the steady state.","category":"page"},{"location":"solvers/nonlinear_system_solvers/#NLsolve.jl","page":"Nonlinear System Solvers","title":"NLsolve.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"This is a wrapper package for importing solvers from NLsolve.jl into the SciML interface.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"NLsolveJL(): A wrapper for NLsolve.jl","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"Submethod choices for this algorithm include:","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":":anderson: Anderson-accelerated fixed-point iteration\n:newton: Classical Newton method with an optional line search\n:trust_region: Trust region Newton method (the default choice)","category":"page"},{"location":"solvers/nonlinear_system_solvers/#MINPACK.jl","page":"Nonlinear System Solvers","title":"MINPACK.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"MINPACK.jl is a wrapper package for bringing the Fortran solvers from MINPACK. However, our benchmarks reveal that these methods are rarely competitive with our native solvers. Thus, our recommendation is to use these only for benchmarking and debugging purposes.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"CMINPACK(): A wrapper for using the classic MINPACK method through MINPACK.jl","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"Submethod choices for this algorithm include:","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":":hybr: Modified version of Powell's algorithm.\n:lm: Levenberg-Marquardt.\n:lmdif: Advanced Levenberg-Marquardt\n:hybrd: Advanced modified version of Powell's algorithm","category":"page"},{"location":"solvers/nonlinear_system_solvers/#Sundials.jl","page":"Nonlinear System Solvers","title":"Sundials.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"Sundials.jl are a classic set of C/Fortran methods which are known for good scaling of the Newton-Krylov form. However, KINSOL is known to be less stable than some other implementations.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"KINSOL(): The KINSOL method of the SUNDIALS C library","category":"page"},{"location":"solvers/nonlinear_system_solvers/#SIAMFANLEquations.jl","page":"Nonlinear System Solvers","title":"SIAMFANLEquations.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"SIAMFANLEquations.jl is a wrapper for the methods in the SIAMFANLEquations.jl library.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"SIAMFANLEquationsJL(): A wrapper for using the methods in SIAMFANLEquations.jl","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"Other solvers listed in Fixed Point Solvers, FastLevenbergMarquardt.jl and LeastSquaresOptim.jl can also solve nonlinear systems.","category":"page"},{"location":"solvers/nonlinear_system_solvers/#NLSolvers.jl","page":"Nonlinear System Solvers","title":"NLSolvers.jl","text":"","category":"section"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"This is a wrapper package for importing solvers from NLSolvers.jl into the SciML interface.","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"NLSolversJL(): A wrapper for NLSolvers.jl","category":"page"},{"location":"solvers/nonlinear_system_solvers/","page":"Nonlinear System Solvers","title":"Nonlinear System Solvers","text":"For a list of possible solvers see the NLSolvers.jl documentation","category":"page"},{"location":"tutorials/getting_started/#Getting-Started-with-Nonlinear-Rootfinding-in-Julia","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"NonlinearSolve.jl is a system for solving rootfinding problems, i.e. finding the value u such that f(u) = 0. In this tutorial we will go through the basics of NonlinearSolve.jl, demonstrating the core ideas and leading you to understanding the deeper parts of the documentation.","category":"page"},{"location":"tutorials/getting_started/#The-Four-Types-of-Nonlinear-Systems","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"The Four Types of Nonlinear Systems","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"There are four types of nonlinear systems:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"The \"standard nonlinear system\", i.e. the NonlinearProblem. This is a system of equations with an initial condition where you want to satisfy all equations simultaneously.\nThe \"interval rootfinding problem\", i.e. the IntervalNonlinearProblem. This is the case where you're given an interval [a,b] and need to find where f(u) = 0 for u inside the bounds.\nThe \"steady state problem\", i.e. find the u such that u' = f(u) = 0. While related to (1), it's not entirely the same because there's a uniquely defined privileged root.\nThe nonlinear least squares problem, which is an under/over-constrained nonlinear system which might not be satisfiable, i.e. there may be no u such that f(u) = 0, and thus we find the u which minimizes ||f(u)|| in the least squares sense.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"One important distinction is that (1) and (3) require the input and output sizes to be the same, while (4) does not.","category":"page"},{"location":"tutorials/getting_started/#Problem-Type-1:-Solving-Nonlinear-Systems-of-Equations","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Problem Type 1: Solving Nonlinear Systems of Equations","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"A nonlinear system f(u) = 0 is specified by defining a function f(u,p), where p are the parameters of the system. For example, the following solves the vector equation f(u) = u^2 - p for a vector of equations:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"using NonlinearSolve\n\nf(u, p) = u .* u .- p\nu0 = [1.0, 1.0]\np = 2.0\nprob = NonlinearProblem(f, u0, p)\nsol = solve(prob)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"where u0 is the initial condition for the rootfinder. Native NonlinearSolve.jl solvers use the given type of u0 to determine the type used within the solver and the return. Note that the parameters p can be any type, but most are an AbstractArray for automatic differentiation.","category":"page"},{"location":"tutorials/getting_started/#Investigating-the-Solution","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Investigating the Solution","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"To investigate the solution, one can look at the elements of the NonlinearSolution. The most important value is sol.u: this is the u that satisfies f(u) = 0. For example:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"u = sol.u","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"f(u, p)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"This final value, the difference of the solution against zero, can also be found with sol.resid:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"sol.resid","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"To know if the solution converged, or why the solution had not converged we can check the return code (retcode):","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"sol.retcode","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"There are multiple return codes which can mean the solve was successful, and thus we can use the general command SciMLBase.successful_retcode to check whether the solution process exited as intended:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"SciMLBase.successful_retcode(sol)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"If we're curious about what it took to solve this equation, then you're in luck because all of the details can be found in sol.stats:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"sol.stats","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"For more information on NonlinearSolutions, see the NonlinearSolution manual page.","category":"page"},{"location":"tutorials/getting_started/#Interacting-with-the-Solver-Options","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Interacting with the Solver Options","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"While sol = solve(prob) worked for our case here, in many situations you may need to interact more deeply with how the solving process is done. First things first, you can specify the solver using the positional arguments. For example, let's set the solver to TrustRegion():","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"solve(prob, TrustRegion())","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"For a complete list of solver choices, see the nonlinear system solvers page.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"Next we can modify the tolerances. Here let's set some really low tolerances to force a tight solution:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"solve(prob, TrustRegion(), reltol = 1e-12, abstol = 1e-12)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"There are many more options for doing this configuring. Specifically for handling termination conditions, see the Termination Conditions page for more details. And for more details on all of the available keyword arguments, see the solver options page.","category":"page"},{"location":"tutorials/getting_started/#Problem-Type-2:-Solving-Interval-Rootfinding-Problems-with-Bracketing-Methods","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Problem Type 2: Solving Interval Rootfinding Problems with Bracketing Methods","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"For scalar rootfinding problems, bracketing methods exist in NonlinearSolve. The difference with bracketing methods is that with bracketing methods, instead of giving a u0 initial condition, you pass a uspan (a,b) bracket in which the zero is expected to live. For example:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"using NonlinearSolve\nf(u, p) = u * u - 2.0\nuspan = (1.0, 2.0) # brackets\nprob_int = IntervalNonlinearProblem(f, uspan)\nsol = solve(prob_int)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"All of the same option handling from before works just as before, now just with different solver choices (see the bracketing solvers page for more details). For example, let's set the solver to ITP() and set a high absolute tolerance:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"sol = solve(prob_int, ITP(), abstol = 0.01)","category":"page"},{"location":"tutorials/getting_started/#Problem-Type-3:-Solving-Steady-State-Problems","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Problem Type 3: Solving Steady State Problems","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"For Steady State Problems, we have a wrapper package SteadyStateDiffEq.jl. This package automates handling SteadyStateProblems with NonlinearSolve and OrdinaryDiffEq.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"using NonlinearSolve, SteadyStateDiffEq\n\nf(u, p, t) = [2 - 2u[1]; u[1] - 4u[2]]\nu0 = [0.0, 0.0]\nprob = SteadyStateProblem(f, u0)\n\nsolve(prob, SSRootfind())","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"If you don't provide a nonlinear solver to SSRootfind it uses a polyalgorithm from NonlinearSolve. We can also provide the actual nonlinear solver to use:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"solve(prob, SSRootfind(Broyden()))","category":"page"},{"location":"tutorials/getting_started/#Problem-Type-4:-Solving-Nonlinear-Least-Squares-Problems","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Problem Type 4: Solving Nonlinear Least Squares Problems","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"using NonlinearSolve\n\nfunction nlls!(du, u, p)\n    du[1] = 2u[1] - 2\n    du[2] = u[1] - 4u[2]\n    du[3] = 0\nend","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"Note that here the output array is of length 3 while the input array is of length 2. We need to provide the resid_prototype to tell the solver what the output size is (this can be skipped for out of place problems):","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"u0 = [0.0, 0.0]\nprob = NonlinearLeastSquaresProblem(\n    NonlinearFunction(nlls!, resid_prototype = zeros(3)), u0)\n\nsolve(prob)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"Same as before, we can change the solver and tolerances:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"solve(prob, GaussNewton(), reltol = 1e-12, abstol = 1e-12)","category":"page"},{"location":"tutorials/getting_started/#Going-Beyond-the-Basics:-How-to-use-the-Documentation","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Going Beyond the Basics: How to use the Documentation","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"Congrats, you now know how to use the basics of NonlinearSolve.jl! However, there is so much more to see. Next check out:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"Some code optimization tricks to know about with NonlinearSolve.jl\nAn iterator interface which lets you step through the solving process step by step\nHow to handle large systems of equations efficiently\nWays to use NonlinearSolve.jl that is faster to startup and can statically compile\nMore detailed termination conditions","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started with Nonlinear Rootfinding in Julia","title":"Getting Started with Nonlinear Rootfinding in Julia","text":"And also check out the rest of the manual.","category":"page"},{"location":"#NonlinearSolve.jl:-High-Performance-Unified-Nonlinear-Solvers","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"","category":"section"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"NonlinearSolve.jl is a unified interface for the nonlinear solving packages of Julia. The package includes its own high-performance nonlinear solvers which include the ability to swap out to fast direct and iterative linear solvers, along with the ability to use sparse automatic differentiation for Jacobian construction and Jacobian-vector products. NonlinearSolve.jl interfaces with other packages of the Julia ecosystem to make it easy to test alternative solver packages and pass small types to control algorithm swapping. It also interfaces with the ModelingToolkit.jl world of symbolic modeling to allow for automatically generating high-performance code.","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"Performance is key: the current methods are made to be highly performant on scalar and statically sized small problems, with options for large-scale systems. If you run into any performance issues, please file an issue. Consult the NonlinearSystemSolvers page for information on how to import solvers from different packages.","category":"page"},{"location":"#Installation","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"Installation","text":"","category":"section"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"To install NonlinearSolve.jl, use the Julia package manager:","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"using Pkg\nPkg.add(\"NonlinearSolve\")","category":"page"},{"location":"#Contributing","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"Contributing","text":"","category":"section"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"Please refer to the SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages for guidance on PRs, issues, and other matters relating to contributing to SciML.\nSee the SciML Style Guide for common coding practices and other style decisions.\nThere are a few community forums:\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Slack\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Zulip\nOn the Julia Discourse forums\nSee also SciML Community page","category":"page"},{"location":"#Reproducibility","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"<details><summary>The documentation of this SciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"</details>","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"</details>","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"</details>","category":"page"},{"location":"","page":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","title":"NonlinearSolve.jl: High-Performance Unified Nonlinear Solvers","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/SciML/\" *\n                name *\n                \".jl/tree/gh-pages/v\" *\n                version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/SciML/\" *\n               name *\n               \".jl/tree/gh-pages/v\" *\n               version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"},{"location":"basics/diagnostics_api/#diagnostics_api","page":"Diagnostics API","title":"Diagnostics API","text":"","category":"section"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"Detailed API Documentation is provided at Diagnostics API Reference.","category":"page"},{"location":"basics/diagnostics_api/#Logging-the-Solve-Process","page":"Diagnostics API","title":"Logging the Solve Process","text":"","category":"section"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"All NonlinearSolve.jl native solvers allow storing and displaying the trace of the nonlinear solve process. This is controlled by 3 keyword arguments to solve:","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"show_trace: Must be Val(true) or Val(false). This controls whether the trace is displayed to the console. (Defaults to Val(false))\ntrace_level: Needs to be one of Trace Objects: TraceMinimal, TraceWithJacobianConditionNumber, or TraceAll. This controls the level of detail of the trace. (Defaults to TraceMinimal())\nstore_trace: Must be Val(true) or Val(false). This controls whether the trace is stored in the solution object. (Defaults to Val(false))","category":"page"},{"location":"basics/diagnostics_api/#Detailed-Internal-Timings","page":"Diagnostics API","title":"Detailed Internal Timings","text":"","category":"section"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"All the native NonlinearSolve.jl algorithms come with in-built TimerOutputs.jl support. However, this is disabled by default and can be enabled via NonlinearSolve.enable_timer_outputs.","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"Note that you will have to restart Julia to disable the timer outputs once enabled.","category":"page"},{"location":"basics/diagnostics_api/#Example-Usage","page":"Diagnostics API","title":"Example Usage","text":"","category":"section"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"using ModelingToolkit, NonlinearSolve\n\n@variables x y z\n@parameters σ ρ β\n\n# Define a nonlinear system\neqs = [0 ~ σ * (y - x), 0 ~ x * (ρ - z) - y, 0 ~ x * y - β * z]\n@mtkbuild ns = NonlinearSystem(eqs, [x, y, z], [σ, ρ, β])\n\nu0 = [x => 1.0, y => 0.0, z => 0.0]\n\nps = [σ => 10.0 ρ => 26.0 β => 8 / 3]\n\nprob = NonlinearProblem(ns, u0, ps)\n\nsolve(prob)","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"This produced the output, but it is hard to diagnose what is going on. We can turn on the trace to see what is happening:","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"solve(prob; show_trace = Val(true), trace_level = TraceAll(10))\nnothing; # hide","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"You can also store the trace in the solution object:","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"sol = solve(prob; trace_level = TraceAll(), store_trace = Val(true));\n\nsol.trace","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"Now, let's try to investigate the time it took for individual internal steps. We will have to use the init and solve! API for this. The TimerOutput will be present in cache.timer. However, note that for poly-algorithms this is currently not implemented.","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"cache = init(prob, NewtonRaphson(); show_trace = Val(true));\nsolve!(cache)\ncache.timer","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"Let's try for some other solver:","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"cache = init(prob, DFSane(); show_trace = Val(true), trace_level = TraceMinimal(50));\nsolve!(cache)\ncache.timer","category":"page"},{"location":"basics/diagnostics_api/","page":"Diagnostics API","title":"Diagnostics API","text":"note: Note\nFor iteration == 0 only the norm(fu, Inf) is guaranteed to be meaningful. The other values being meaningful are solver dependent.","category":"page"},{"location":"api/nlsolvers/#NLSolvers.jl","page":"NLSolvers.jl","title":"NLSolvers.jl","text":"","category":"section"},{"location":"api/nlsolvers/","page":"NLSolvers.jl","title":"NLSolvers.jl","text":"This is a extension for importing solvers from NLSolvers.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/nlsolvers/","page":"NLSolvers.jl","title":"NLSolvers.jl","text":"using Pkg\nPkg.add(\"NLSolvers\")\nusing NLSolvers, NonlinearSolve","category":"page"},{"location":"api/nlsolvers/#Solver-API","page":"NLSolvers.jl","title":"Solver API","text":"","category":"section"},{"location":"api/nlsolvers/","page":"NLSolvers.jl","title":"NLSolvers.jl","text":"NLSolversJL","category":"page"},{"location":"api/nlsolvers/#NonlinearSolve.NLSolversJL","page":"NLSolvers.jl","title":"NonlinearSolve.NLSolversJL","text":"NLSolversJL(method; autodiff = nothing)\nNLSolversJL(; method, autodiff = nothing)\n\nWrapper over NLSolvers.jl Nonlinear Equation Solvers. We automatically construct the jacobian function and supply it to the solver.\n\nArguments\n\nmethod: the choice of method for solving the nonlinear system. See the documentation for NLSolvers.jl for more information.\nautodiff: the choice of method for generating the Jacobian. Defaults to nothing which means that a default is selected according to the problem specification. Can be any valid ADTypes.jl autodiff type (conditional on that backend being supported in NonlinearSolve.jl).\n\n\n\n\n\n","category":"type"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"M. K. Transtrum and J. P. Sethna. Improvements to the Levenberg-Marquardt algorithm for nonlinear least-squares minimization, arXiv preprint arXiv:1201.5885 (2012).\n\n\n\nW. La Cruz, J. Martı́nez and M. Raydan. Spectral residual method without gradient information for solving large-scale nonlinear systems of equations. Mathematics of computation 75, 1429–1448 (2006).\n\n\n\nC. G. Broyden. A class of methods for solving nonlinear simultaneous equations. Mathematics of computation 19, 577–593 (1965).\n\n\n\nJ. Klement. On using quasi-newton algorithms of the Broyden class for model-to-test correlation. Journal of Aerospace Technology and Management 6, 407–414 (2014).\n\n\n\nM. Ziani and F. Guyomarc’h. An autoadaptative limited memory Broyden’s method to solve systems of nonlinear equations. Applied mathematics and computation 205, 202–211 (2008).\n\n\n\nY.-x. Yuan. Recent advances in trust region algorithms. Mathematical Programming 151, 249–281 (2015).\n\n\n\nT. S. Coffey, C. T. Kelley and D. E. Keyes. Pseudotransient continuation and differential-algebraic equations. SIAM Journal on Scientific Computing 25, 553–569 (2003).\n\n\n\nC. T. Kelley and D. E. Keyes. Convergence analysis of pseudo-transient continuation. SIAM Journal on Numerical Analysis 35, 508–523 (1998).\n\n\n\nD.-H. Li and M. Fukushima. A derivative-free line search and global convergence of Broyden-like method for nonlinear equations. Optimization methods and software 13, 181–201 (2000).\n\n\n\nL. Hei. A self-adaptive trust region algorithm. Journal of Computational Mathematics, 229–236 (2003).\n\n\n\nF. Bastin, V. Malmedy, M. Mouffe, P. L. Toint and D. Tomanos. A retrospective trust-region method for unconstrained optimization. Mathematical programming 123, 395–418 (2010).\n\n\n\nJ. Fan. Convergence rate of the trust region method for nonlinear equations under local error bound condition. Computational Optimization and Applications 34, 215–227 (2006).\n\n\n\nN. Lepage-Saucier. Alternating cyclic extrapolation methods for optimization algorithms, arXiv preprint arXiv:2104.04974 (2021).\n\n\n\n","category":"page"},{"location":"basics/nonlinear_functions/#nonlinearfunctions","page":"Nonlinear Functions and Jacobian Types","title":"Nonlinear Functions and Jacobian Types","text":"","category":"section"},{"location":"basics/nonlinear_functions/","page":"Nonlinear Functions and Jacobian Types","title":"Nonlinear Functions and Jacobian Types","text":"The SciML ecosystem provides an extensive interface for declaring extra functions associated with the differential equation's data. In traditional libraries, there is usually only one option: the Jacobian. However, we allow for a large array of pre-computed functions to speed up the calculations. This is offered via the NonlinearFunction types, which can be passed to the problems.","category":"page"},{"location":"basics/nonlinear_functions/#Function-Type-Definitions","page":"Nonlinear Functions and Jacobian Types","title":"Function Type Definitions","text":"","category":"section"},{"location":"basics/nonlinear_functions/","page":"Nonlinear Functions and Jacobian Types","title":"Nonlinear Functions and Jacobian Types","text":"SciMLBase.IntervalNonlinearFunction\nSciMLBase.NonlinearFunction","category":"page"},{"location":"basics/nonlinear_functions/#SciMLBase.IntervalNonlinearFunction","page":"Nonlinear Functions and Jacobian Types","title":"SciMLBase.IntervalNonlinearFunction","text":"DocStringExtensions.TypeDefinition()\n\nA representation of an interval nonlinear system of equations f, defined by:\n\nf(tp) = u = 0\n\nand all of its related functions. For all cases, p are the parameters and t is the interval variable.\n\nConstructor\n\nIntervalNonlinearFunction{iip, specialize}(f;\n                           analytic = __has_analytic(f) ? f.analytic : nothing,\n                           sys = __has_sys(f) ? f.sys : nothing)\n\nNote that only the function f itself is required. This function should be given as f!(u,t,p) or u = f(t,p). See the section on iip for more details on in-place vs out-of-place handling.\n\nAll of the remaining functions are optional for improving or accelerating the usage of f. These include:\n\nanalytic(p): used to pass an analytical solution function for the analytical solution of the ODE. Generally only used for testing and development of the solvers.\n\niip: In-Place vs Out-Of-Place\n\nFor more details on this argument, see the ODEFunction documentation.\n\nspecialize: Controlling Compilation and Specialization\n\nFor more details on this argument, see the ODEFunction documentation.\n\nFields\n\nThe fields of the IntervalNonlinearFunction type directly match the names of the inputs.\n\n\n\n\n\n","category":"type"},{"location":"basics/nonlinear_functions/#SciMLBase.NonlinearFunction","page":"Nonlinear Functions and Jacobian Types","title":"SciMLBase.NonlinearFunction","text":"DocStringExtensions.TypeDefinition()\n\nA representation of a nonlinear system of equations f, defined by:\n\n0 = f(up)\n\nand all of its related functions, such as the Jacobian of f, its gradient with respect to time, and more. For all cases, u0 is the initial condition, p are the parameters, and t is the independent variable.\n\nConstructor\n\nNonlinearFunction{iip, specialize}(f;\n                           analytic = __has_analytic(f) ? f.analytic : nothing,\n                           jac = __has_jac(f) ? f.jac : nothing,\n                           jvp = __has_jvp(f) ? f.jvp : nothing,\n                           vjp = __has_vjp(f) ? f.vjp : nothing,\n                           jac_prototype = __has_jac_prototype(f) ? f.jac_prototype : nothing,\n                           sparsity = __has_sparsity(f) ? f.sparsity : jac_prototype,\n                           paramjac = __has_paramjac(f) ? f.paramjac : nothing,\n                           colorvec = __has_colorvec(f) ? f.colorvec : nothing,\n                           sys = __has_sys(f) ? f.sys : nothing)\n\nNote that only the function f itself is required. This function should be given as f!(du,u,p) or du = f(u,p). See the section on iip for more details on in-place vs out-of-place handling.\n\nAll of the remaining functions are optional for improving or accelerating the usage of f. These include:\n\nanalytic(u0,p): used to pass an analytical solution function for the analytical solution of the ODE. Generally only used for testing and development of the solvers.\njac(J,u,p) or J=jac(u,p): returns fracdfdu\njvp(Jv,v,u,p) or Jv=jvp(v,u,p): returns the directional derivativefracdfdu v\nvjp(Jv,v,u,p) or Jv=vjp(v,u,p): returns the adjoint derivativefracdfdu^ast v\njac_prototype: a prototype matrix matching the type that matches the Jacobian. For example, if the Jacobian is tridiagonal, then an appropriately sized Tridiagonal matrix can be used as the prototype and integrators will specialize on this structure where possible. Non-structured sparsity patterns should use a SparseMatrixCSC with a correct sparsity pattern for the Jacobian. The default is nothing, which means a dense Jacobian.\nparamjac(pJ,u,p): returns the parameter Jacobian fracdfdp.\ncolorvec: a color vector according to the SparseDiffTools.jl definition for the sparsity pattern of the jac_prototype. This specializes the Jacobian construction when using finite differences and automatic differentiation to be computed in an accelerated manner based on the sparsity pattern. Defaults to nothing, which means a color vector will be internally computed on demand when required. The cost of this operation is highly dependent on the sparsity pattern.\n\niip: In-Place vs Out-Of-Place\n\nFor more details on this argument, see the ODEFunction documentation.\n\nspecialize: Controlling Compilation and Specialization\n\nFor more details on this argument, see the ODEFunction documentation.\n\nFields\n\nThe fields of the NonlinearFunction type directly match the names of the inputs.\n\n\n\n\n\n","category":"type"},{"location":"native/globalization/#Globalization-Subroutines","page":"Globalization Subroutines","title":"Globalization Subroutines","text":"","category":"section"},{"location":"native/globalization/","page":"Globalization Subroutines","title":"Globalization Subroutines","text":"The following globalization subroutines are available.","category":"page"},{"location":"native/globalization/","page":"Globalization Subroutines","title":"Globalization Subroutines","text":"Pages = [\"globalization.md\"]","category":"page"},{"location":"native/globalization/#line-search","page":"Globalization Subroutines","title":"Line Search Algorithms","text":"","category":"section"},{"location":"native/globalization/","page":"Globalization Subroutines","title":"Globalization Subroutines","text":"LiFukushimaLineSearch\nLineSearchesJL\nRobustNonMonotoneLineSearch\nNoLineSearch","category":"page"},{"location":"native/globalization/#NonlinearSolve.LiFukushimaLineSearch","page":"Globalization Subroutines","title":"NonlinearSolve.LiFukushimaLineSearch","text":"LiFukushimaLineSearch(; lambda_0 = 1, beta = 1 // 2, sigma_1 = 1 // 1000,\n    sigma_2 = 1 // 1000, eta = 1 // 10, nan_max_iter::Int = 5, maxiters::Int = 100)\n\nA derivative-free line search and global convergence of Broyden-like method for nonlinear equations [9].\n\n\n\n\n\n","category":"type"},{"location":"native/globalization/#NonlinearSolve.LineSearchesJL","page":"Globalization Subroutines","title":"NonlinearSolve.LineSearchesJL","text":"LineSearchesJL(; method = LineSearches.Static(), autodiff = nothing, α = true)\n\nWrapper over algorithms from LineSearches.jl. Allows automatic construction of the objective functions for the line search algorithms utilizing automatic differentiation for fast Vector Jacobian Products.\n\nArguments\n\nmethod: the line search algorithm to use. Defaults to method = LineSearches.Static(), which means that the step size is fixed to the value of alpha.\nautodiff: the automatic differentiation backend to use for the line search. Using a reverse mode automatic differentiation backend if recommended.\nα: the initial step size to use. Defaults to true (which is equivalent to 1).\n\n\n\n\n\n","category":"type"},{"location":"native/globalization/#NonlinearSolve.RobustNonMonotoneLineSearch","page":"Globalization Subroutines","title":"NonlinearSolve.RobustNonMonotoneLineSearch","text":"RobustNonMonotoneLineSearch(; gamma = 1 // 10000, sigma_0 = 1, M::Int = 10,\n    tau_min = 1 // 10, tau_max = 1 // 2, n_exp::Int = 2, maxiters::Int = 100,\n    η_strategy = (fn₁, n, uₙ, fₙ) -> fn₁ / n^2)\n\nRobust NonMonotone Line Search is a derivative free line search method from DF Sane [2].\n\nKeyword Arguments\n\nM: The monotonicity of the algorithm is determined by a this positive integer. A value of 1 for M would result in strict monotonicity in the decrease of the L2-norm of the function f. However, higher values allow for more flexibility in this reduction. Despite this, the algorithm still ensures global convergence through the use of a non-monotone line-search algorithm that adheres to the Grippo-Lampariello-Lucidi condition. Values in the range of 5 to 20 are usually sufficient, but some cases may call for a higher value of M. The default setting is 10.\ngamma: a parameter that influences if a proposed step will be accepted. Higher value of gamma will make the algorithm more restrictive in accepting steps. Defaults to 1e-4.\ntau_min: if a step is rejected the new step size will get multiplied by factor, and this parameter is the minimum value of that factor. Defaults to 0.1.\ntau_max: if a step is rejected the new step size will get multiplied by factor, and this parameter is the maximum value of that factor. Defaults to 0.5.\nn_exp: the exponent of the loss, i.e. f_n=F(x_n)^n_exp. The paper uses n_exp ∈ {1, 2}. Defaults to 2.\nη_strategy:  function to determine the parameter η, which enables growth of f_n^2. Called as η = η_strategy(fn_1, n, x_n, f_n) with fn_1 initialized as fn_1=f(x_1)^n_exp, n is the iteration number, x_n is the current x-value and f_n the current residual. Should satisfy η  0 and ₖ ηₖ  . Defaults to fn_1  n^2.\nmaxiters: the maximum number of iterations allowed for the inner loop of the algorithm. Defaults to 100.\n\n\n\n\n\n","category":"type"},{"location":"native/globalization/#NonlinearSolve.NoLineSearch","page":"Globalization Subroutines","title":"NonlinearSolve.NoLineSearch","text":"NoLineSearch <: AbstractNonlinearSolveLineSearchAlgorithm\n\nDon't perform a line search. Just return the initial step length of 1.\n\n\n\n\n\n","category":"type"},{"location":"native/globalization/#Radius-Update-Schemes-for-Trust-Region","page":"Globalization Subroutines","title":"Radius Update Schemes for Trust Region","text":"","category":"section"},{"location":"native/globalization/","page":"Globalization Subroutines","title":"Globalization Subroutines","text":"RadiusUpdateSchemes","category":"page"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes","text":"RadiusUpdateSchemes\n\nRadiusUpdateSchemes is provides different types of radius update schemes implemented in the Trust Region method. These schemes specify how the radius of the so-called trust region is updated after each iteration of the algorithm. The specific role and caveats associated with each scheme are provided below.\n\nUsing RadiusUpdateSchemes\n\nSimply put the desired scheme as follows: sol = solve(prob, alg = TrustRegion(radius_update_scheme = RadiusUpdateSchemes.Hei)).\n\n\n\n\n\n","category":"module"},{"location":"native/globalization/#Available-Radius-Update-Schemes","page":"Globalization Subroutines","title":"Available Radius Update Schemes","text":"","category":"section"},{"location":"native/globalization/","page":"Globalization Subroutines","title":"Globalization Subroutines","text":"RadiusUpdateSchemes.Simple\nRadiusUpdateSchemes.Hei\nRadiusUpdateSchemes.Yuan\nRadiusUpdateSchemes.Bastin\nRadiusUpdateSchemes.Fan\nRadiusUpdateSchemes.NLsolve\nRadiusUpdateSchemes.NocedalWright","category":"page"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes.Simple","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes.Simple","text":"RadiusUpdateSchemes.Simple\n\nThe simple or conventional radius update scheme. This scheme is chosen by default and follows the conventional approach to update the trust region radius, i.e. if the trial step is accepted it increases the radius by a fixed factor (bounded by a maximum radius) and if the trial step is rejected, it shrinks the radius by a fixed factor.\n\n\n\n\n\n","category":"constant"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes.Hei","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes.Hei","text":"RadiusUpdateSchemes.Hei\n\nThis scheme is proposed in Hei [10]. The trust region radius depends on the size (norm) of the current step size. The hypothesis is to let the radius converge to zero as the iterations progress, which is more reliable and robust for ill-conditioned as well as degenerate problems.\n\n\n\n\n\n","category":"constant"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes.Yuan","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes.Yuan","text":"RadiusUpdateSchemes.Yuan\n\nThis scheme is proposed by Yuan [6]. Similar to Hei's scheme, the trust region is updated in a way so that it converges to zero, however here, the radius depends on the size (norm) of the current gradient of the objective (merit) function. The hypothesis is that the step size is bounded by the gradient size, so it makes sense to let the radius depend on the gradient.\n\n\n\n\n\n","category":"constant"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes.Bastin","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes.Bastin","text":"RadiusUpdateSchemes.Bastin\n\nThis scheme is proposed by Bastin et al. [11]. The scheme is called a retrospective update scheme as it uses the model function at the current iteration to compute the ratio of the actual reduction and the predicted reduction in the previous trial step, and use this ratio to update the trust region radius. The hypothesis is to exploit the information made available during the optimization process in order to vary the accuracy of the objective function computation.\n\n\n\n\n\n","category":"constant"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes.Fan","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes.Fan","text":"RadiusUpdateSchemes.Fan\n\nThis scheme is proposed by Fan [12]. It is very much similar to Hei's and Yuan's schemes as it lets the trust region radius depend on the current size (norm) of the objective (merit) function itself. These new update schemes are known to improve local convergence.\n\n\n\n\n\n","category":"constant"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes.NLsolve","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes.NLsolve","text":"RadiusUpdateSchemes.NLsolve\n\nThe same updating scheme as in NLsolve's (https://github.com/JuliaNLSolvers/NLsolve.jl) trust region dogleg implementation.\n\n\n\n\n\n","category":"constant"},{"location":"native/globalization/#NonlinearSolve.RadiusUpdateSchemes.NocedalWright","page":"Globalization Subroutines","title":"NonlinearSolve.RadiusUpdateSchemes.NocedalWright","text":"RadiusUpdateSchemes.NocedalWright\n\nTrust region updating scheme as in Nocedal and Wright [see Alg 11.5, page 291].\n\n\n\n\n\n","category":"constant"},{"location":"solvers/bracketing_solvers/#bracketing","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"","category":"section"},{"location":"solvers/bracketing_solvers/","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"solve(prob::IntervalNonlinearProblem, alg; kwargs...)","category":"page"},{"location":"solvers/bracketing_solvers/","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"Solves for f(t) = 0 in the problem defined by prob using the algorithm alg. If no algorithm is given, a default algorithm will be chosen.","category":"page"},{"location":"solvers/bracketing_solvers/#Recommended-Methods","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Recommended Methods","text":"","category":"section"},{"location":"solvers/bracketing_solvers/","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"ITP is the recommended method for the scalar interval root-finding problems. It is particularly well-suited for cases where the function is smooth and well-behaved; and achieved superlinear convergence while retaining the optimal worst-case performance of the Bisection method. For more details, consult the detailed solver API docs.","category":"page"},{"location":"solvers/bracketing_solvers/","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"Ridder is a hybrid method that uses the value of function at the midpoint of the interval to perform an exponential interpolation to the root. This gives a fast convergence with a guaranteed convergence of at most twice the number of iterations as the bisection method.","category":"page"},{"location":"solvers/bracketing_solvers/","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"Brent is a combination of the bisection method, the secant method and inverse quadratic interpolation. At every iteration, Brent's method decides which method out of these three is likely to do best, and proceeds by doing a step according to that method. This gives a robust and fast method, which therefore enjoys considerable popularity.","category":"page"},{"location":"solvers/bracketing_solvers/#Full-List-of-Methods","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Full List of Methods","text":"","category":"section"},{"location":"solvers/bracketing_solvers/#SimpleNonlinearSolve.jl","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"SimpleNonlinearSolve.jl","text":"","category":"section"},{"location":"solvers/bracketing_solvers/","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"These methods are automatically included as part of NonlinearSolve.jl. Though, one can use SimpleNonlinearSolve.jl directly to decrease the dependencies and improve load time.","category":"page"},{"location":"solvers/bracketing_solvers/","page":"Interval Root-Finding Methods (Bracketing Solvers)","title":"Interval Root-Finding Methods (Bracketing Solvers)","text":"ITP: A non-allocating ITP (Interpolate, Truncate & Project) method\nFalsi: A non-allocating regula falsi method\nBisection: A common bisection method\nRidder: A non-allocating Ridder method\nBrent: A non-allocating Brent method","category":"page"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.jl","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"","category":"section"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"These methods can be used independently of the rest of NonlinearSolve.jl","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"Pages = [\"simplenonlinearsolve.md\"]","category":"page"},{"location":"native/simplenonlinearsolve/#Interval-Methods","page":"SimpleNonlinearSolve.jl","title":"Interval Methods","text":"","category":"section"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"These methods are suited for interval (scalar) root-finding problems, i.e. IntervalNonlinearProblem.","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"ITP\nAlefeld\nBisection\nFalsi\nRidder\nBrent","category":"page"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.ITP","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.ITP","text":"ITP(; k1::Real = 0.007, k2::Real = 1.5, n0::Int = 10)\n\nITP (Interpolate Truncate & Project)\n\nUse the ITP method to find a root of a bracketed function, with a convergence rate between 1 and 1.62.\n\nThis method was introduced in the paper \"An Enhancement of the Bisection Method Average Performance Preserving Minmax Optimality\" (https://doi.org/10.1145/3423597) by I. F. D. Oliveira and R. H. C. Takahashi.\n\nTuning Parameters\n\nThe following keyword parameters are accepted.\n\nn₀::Int = 10, the 'slack'. Must not be negative. When n₀ = 0 the worst-case is identical to that of bisection, but increasing n₀ provides greater opportunity for superlinearity.\nscaled_κ₁::Float64 = 0.2. Must not be negative. The recommended value is 0.2. Lower values produce tighter asymptotic behaviour, while higher values improve the steady-state behaviour when truncation is not helpful.\nκ₂::Real = 2. Must lie in [1, 1+ϕ ≈ 2.62). Higher values allow for a greater convergence rate, but also make the method more succeptable to worst-case performance. In practice, κ₂=1, 2 seems to work well due to the computational simplicity, as κ₂ is used as an exponent in the method.\n\nComputation of κ₁\n\nIn the current implementation, we compute κ₁ = scaled_κ₁·|Δx₀|^(1 - κ₂); this allows κ₁ to adapt to the length of the interval and keep the proposed steps proportional to Δx.\n\nWorst Case Performance\n\nn½ + n₀ iterations, where n½ is the number of iterations using bisection (n½ = ⌈log2(Δx)/2tol⌉).\n\nAsymptotic Performance\n\nIf f is twice differentiable and the root is simple, then with n₀ > 0 the convergence rate is √κ₂.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.Alefeld","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.Alefeld","text":"Alefeld()\n\nAn implementation of algorithm 4.2 from Alefeld.\n\nThe paper brought up two new algorithms. Here choose to implement algorithm 4.2 rather than algorithm 4.1 because, in certain sense, the second algorithm(4.2) is an optimal procedure.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.Bisection","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.Bisection","text":"Bisection(; exact_left = false, exact_right = false)\n\nA common bisection method.\n\nKeyword Arguments\n\nexact_left: whether to enforce whether the left side of the interval must be exactly zero for the returned result. Defaults to false.\nexact_right: whether to enforce whether the right side of the interval must be exactly zero for the returned result. Defaults to false.\n\nwarning: Warning\nCurrently, the keyword arguments are not implemented.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.Falsi","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.Falsi","text":"Falsi()\n\nA non-allocating regula falsi method.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.Ridder","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.Ridder","text":"Ridder()\n\nA non-allocating ridder method.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.Brent","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.Brent","text":"Brent()\n\nleft non-allocating Brent method.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#General-Methods","page":"SimpleNonlinearSolve.jl","title":"General Methods","text":"","category":"section"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"These methods are suited for any general nonlinear root-finding problem, i.e. NonlinearProblem.","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"Solver In-place Out of Place Non-Allocating (Scalars) Non-Allocating (SArray)\nSimpleNewtonRaphson ✔️ ✔️ ✔️ ✔️\nSimpleBroyden ✔️ ✔️ ✔️ ✔️\nSimpleHalley ❌ ✔️ ✔️ ❌\nSimpleKlement ✔️ ✔️ ✔️ ✔️\nSimpleTrustRegion ✔️ ✔️ ✔️ ✔️\nSimpleDFSane ✔️ ✔️ ✔️[1] ✔️\nSimpleLimitedMemoryBroyden ✔️ ✔️ ✔️ ✔️[2]","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"The algorithms which are non-allocating can be used directly inside GPU Kernels[3]. See PSOGPU.jl for more details.","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"SimpleNewtonRaphson\nSimpleBroyden\nSimpleHalley\nSimpleKlement\nSimpleTrustRegion\nSimpleDFSane\nSimpleLimitedMemoryBroyden","category":"page"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.SimpleNewtonRaphson","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.SimpleNewtonRaphson","text":"SimpleNewtonRaphson(autodiff)\nSimpleNewtonRaphson(; autodiff = nothing)\n\nA low-overhead implementation of Newton-Raphson. This method is non-allocating on scalar and static array problems.\n\nnote: Note\nAs part of the decreased overhead, this method omits some of the higher level error catching of the other methods. Thus, to see better error messages, use one of the other methods like NewtonRaphson.\n\nKeyword Arguments\n\nautodiff: determines the backend used for the Jacobian. Defaults to  nothing (i.e. automatic backend selection). Valid choices include jacobian backends from DifferentiationInterface.jl.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.SimpleBroyden","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.SimpleBroyden","text":"SimpleBroyden(; linesearch = Val(false), alpha = nothing)\n\nA low-overhead implementation of Broyden. This method is non-allocating on scalar and static array problems.\n\nKeyword Arguments\n\nlinesearch: If linesearch is Val(true), then we use the LiFukushimaLineSearch [9] line search else no line search is used. For advanced customization of the line search, use Broyden from NonlinearSolve.jl.\nalpha: Scale the initial jacobian initialization with alpha. If it is nothing, we will compute the scaling using 2 * norm(fu) / max(norm(u), true).\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.SimpleHalley","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.SimpleHalley","text":"SimpleHalley(autodiff)\nSimpleHalley(; autodiff = AutoForwardDiff())\n\nA low-overhead implementation of Halley's Method.\n\nnote: Note\nAs part of the decreased overhead, this method omits some of the higher level error catching of the other methods. Thus, to see better error messages, use one of the other methods like NewtonRaphson\n\nKeyword Arguments\n\nautodiff: determines the backend used for the Hessian. Defaults to nothing (i.e. automatic backend selection). Valid choices include backends from DifferentiationInterface.jl.\n\nwarning: Warning\nInplace Problems are currently not supported by this method.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.SimpleKlement","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.SimpleKlement","text":"SimpleKlement()\n\nA low-overhead implementation of Klement [4]. This method is non-allocating on scalar and static array problems.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.SimpleTrustRegion","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.SimpleTrustRegion","text":"SimpleTrustRegion(; autodiff = AutoForwardDiff(), max_trust_radius = 0.0,\n    initial_trust_radius = 0.0, step_threshold = nothing,\n    shrink_threshold = nothing, expand_threshold = nothing,\n    shrink_factor = 0.25, expand_factor = 2.0, max_shrink_times::Int = 32,\n    nlsolve_update_rule = Val(false))\n\nA low-overhead implementation of a trust-region solver. This method is non-allocating on scalar and static array problems.\n\nKeyword Arguments\n\nautodiff: determines the backend used for the Jacobian. Defaults to nothing (i.e. automatic backend selection). Valid choices include jacobian backends from DifferentiationInterface.jl.\nmax_trust_radius: the maximum radius of the trust region. Defaults to max(norm(f(u0)), maximum(u0) - minimum(u0)).\ninitial_trust_radius: the initial trust region radius. Defaults to max_trust_radius / 11.\nstep_threshold: the threshold for taking a step. In every iteration, the threshold is compared with a value r, which is the actual reduction in the objective function divided by the predicted reduction. If step_threshold > r the model is not a good approximation, and the step is rejected. Defaults to 0.1. For more details, see Rahpeymaii, F.\nshrink_threshold: the threshold for shrinking the trust region radius. In every iteration, the threshold is compared with a value r which is the actual reduction in the objective function divided by the predicted reduction. If shrink_threshold > r the trust region radius is shrunk by shrink_factor. Defaults to 0.25. For more details, see Rahpeymaii, F.\nexpand_threshold: the threshold for expanding the trust region radius. If a step is taken, i.e step_threshold < r (with r defined in shrink_threshold), a check is also made to see if expand_threshold < r. If that is true, the trust region radius is expanded by expand_factor. Defaults to 0.75.\nshrink_factor: the factor to shrink the trust region radius with if shrink_threshold > r (with r defined in shrink_threshold). Defaults to 0.25.\nexpand_factor: the factor to expand the trust region radius with if expand_threshold < r (with r defined in shrink_threshold). Defaults to 2.0.\nmax_shrink_times: the maximum number of times to shrink the trust region radius in a row, max_shrink_times is exceeded, the algorithm returns. Defaults to 32.\nnlsolve_update_rule: If set to Val(true), updates the trust region radius using the update rule from NLSolve.jl. Defaults to Val(false). If set to Val(true), few of the radius update parameters – step_threshold = 0.05, expand_threshold = 0.9, and shrink_factor = 0.5 – have different defaults.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.SimpleDFSane","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.SimpleDFSane","text":"SimpleDFSane(; σ_min::Real = 1e-10, σ_max::Real = 1e10, σ_1::Real = 1.0,\n    M::Union{Int, Val} = Val(10), γ::Real = 1e-4, τ_min::Real = 0.1, τ_max::Real = 0.5,\n    nexp::Int = 2, η_strategy::Function = (f_1, k, x, F) -> f_1 ./ k^2)\n\nA low-overhead implementation of the df-sane method for solving large-scale nonlinear systems of equations. For in depth information about all the parameters and the algorithm, see La Cruz et al. [2].\n\nKeyword Arguments\n\nσ_min: the minimum value of the spectral coefficient σ_k which is related to the step size in the algorithm. Defaults to 1e-10.\nσ_max: the maximum value of the spectral coefficient σ_k which is related to the step size in the algorithm. Defaults to 1e10.\nσ_1: the initial value of the spectral coefficient σ_k which is related to the step size in the algorithm.. Defaults to 1.0.\nM: The monotonicity of the algorithm is determined by a this positive integer. A value of 1 for M would result in strict monotonicity in the decrease of the L2-norm of the function f. However, higher values allow for more flexibility in this reduction. Despite this, the algorithm still ensures global convergence through the use of a non-monotone line-search algorithm that adheres to the Grippo-Lampariello-Lucidi condition. Values in the range of 5 to 20 are usually sufficient, but some cases may call for a higher value of M. The default setting is 10.\nγ: a parameter that influences if a proposed step will be accepted. Higher value of γ will make the algorithm more restrictive in accepting steps. Defaults to 1e-4.\nτ_min: if a step is rejected the new step size will get multiplied by factor, and this parameter is the minimum value of that factor. Defaults to 0.1.\nτ_max: if a step is rejected the new step size will get multiplied by factor, and this parameter is the maximum value of that factor. Defaults to 0.5.\nnexp: the exponent of the loss, i.e. f_k=F(x_k)^nexp. The paper uses nexp ∈ {1,2}. Defaults to 2.\nη_strategy:  function to determine the parameter η_k, which enables growth of F^2. Called as η_k = η_strategy(f_1, k, x, F) with f_1 initialized as f_1=F(x_1)^nexp, k is the iteration number, x is the current x-value and F the current residual. Should satisfy η_k  0 and ₖ ηₖ  . Defaults to F^2  k^2.\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/#SimpleNonlinearSolve.SimpleLimitedMemoryBroyden","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.SimpleLimitedMemoryBroyden","text":"SimpleLimitedMemoryBroyden(; threshold::Union{Val, Int} = Val(27),\n    linesearch = Val(false), alpha = nothing)\n\nA limited memory implementation of Broyden. This method applies the L-BFGS scheme to Broyden's method.\n\nIf the threshold is larger than the problem size, then this method will use SimpleBroyden.\n\nKeyword Arguments:\n\nlinesearch: If linesearch is Val(true), then we use the LiFukushimaLineSearch [9] line search else no line search is used. For advanced customization of the line search, use the LimitedMemoryBroyden algorithm in NonlinearSolve.jl.\nalpha: Scale the initial jacobian initialization with alpha. If it is nothing, we will compute the scaling using 2 * norm(fu) / max(norm(u), true).\n\n\n\n\n\n","category":"type"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"SimpleGaussNewton is aliased to SimpleNewtonRaphson for solving Nonlinear Least Squares problems.","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"[1]: Needs StaticArrays.jl to be installed and loaded for the non-allocating version.","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"[2]: This method is non-allocating if the termination condition is set to either nothing (default) or AbsNormTerminationMode.","category":"page"},{"location":"native/simplenonlinearsolve/","page":"SimpleNonlinearSolve.jl","title":"SimpleNonlinearSolve.jl","text":"[3]: Only the defaults are guaranteed to work inside kernels. We try to provide warnings if the used version is not non-allocating.","category":"page"},{"location":"api/minpack/#MINPACK.jl","page":"MINPACK.jl","title":"MINPACK.jl","text":"","category":"section"},{"location":"api/minpack/","page":"MINPACK.jl","title":"MINPACK.jl","text":"This is a extension for importing solvers from MINPACK into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/minpack/","page":"MINPACK.jl","title":"MINPACK.jl","text":"using Pkg\nPkg.add(\"MINPACK\")\nusing MINPACK, NonlinearSolve","category":"page"},{"location":"api/minpack/#Solver-API","page":"MINPACK.jl","title":"Solver API","text":"","category":"section"},{"location":"api/minpack/","page":"MINPACK.jl","title":"MINPACK.jl","text":"CMINPACK","category":"page"},{"location":"api/minpack/#NonlinearSolve.CMINPACK","page":"MINPACK.jl","title":"NonlinearSolve.CMINPACK","text":"CMINPACK(; method::Symbol = :auto, autodiff = missing)\n\nKeyword Arguments\n\nmethod: the choice of method for the solver.\nautodiff: Defaults to missing, which means we will default to letting MINPACK construct the jacobian if f.jac is not provided. In other cases, we use it to generate a jacobian similar to other NonlinearSolve solvers.\n\nSubmethod Choice\n\nThe keyword argument method can take on different value depending on which method of fsolve you are calling. The standard choices of method are:\n\n:hybr: Modified version of Powell's algorithm. Uses MINPACK routine hybrd1\n:lm: Levenberg-Marquardt. Uses MINPACK routine lmdif1\n:lmdif: Advanced Levenberg-Marquardt (more options available with ; kwargs...). See MINPACK routine lmdif for more information\n:hybrd: Advanced modified version of Powell's algorithm (more options available with ; kwargs...). See MINPACK routine hybrd for more information\n\nIf a Jacobian is supplied as part of the NonlinearFunction, then the following methods are allowed:\n\n:hybr: Advanced modified version of Powell's algorithm with user supplied Jacobian. Additional arguments are available via ; kwargs.... See MINPACK routine hybrj for more information\n:lm: Advanced Levenberg-Marquardt with user supplied Jacobian. Additional arguments are available via ; kwargs.... See MINPACK routine lmder for more information\n\nThe default choice of :auto selects :hybr for NonlinearProblem and :lm for NonlinearLeastSquaresProblem.\n\nnote: Note\nThis algorithm is only available if MINPACK.jl is installed.\n\n\n\n\n\n","category":"type"},{"location":"api/leastsquaresoptim/#LeastSquaresOptim.jl","page":"LeastSquaresOptim.jl","title":"LeastSquaresOptim.jl","text":"","category":"section"},{"location":"api/leastsquaresoptim/","page":"LeastSquaresOptim.jl","title":"LeastSquaresOptim.jl","text":"This is an extension for importing solvers from LeastSquaresOptim.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/leastsquaresoptim/","page":"LeastSquaresOptim.jl","title":"LeastSquaresOptim.jl","text":"using Pkg\nPkg.add(\"LeastSquaresOptim\")\nusing LeastSquaresOptim, NonlinearSolve","category":"page"},{"location":"api/leastsquaresoptim/#Solver-API","page":"LeastSquaresOptim.jl","title":"Solver API","text":"","category":"section"},{"location":"api/leastsquaresoptim/","page":"LeastSquaresOptim.jl","title":"LeastSquaresOptim.jl","text":"LeastSquaresOptimJL","category":"page"},{"location":"api/leastsquaresoptim/#NonlinearSolve.LeastSquaresOptimJL","page":"LeastSquaresOptim.jl","title":"NonlinearSolve.LeastSquaresOptimJL","text":"LeastSquaresOptimJL(alg = :lm; linsolve = nothing, autodiff::Symbol = :central)\n\nWrapper over LeastSquaresOptim.jl for solving NonlinearLeastSquaresProblem.\n\nArguments\n\nalg: Algorithm to use. Can be :lm or :dogleg.\n\nKeyword Arguments\n\nlinsolve: Linear solver to use. Can be :qr, :cholesky or :lsmr. If nothing, then LeastSquaresOptim.jl will choose the best linear solver based on the Jacobian structure.\nautodiff: Automatic differentiation / Finite Differences. Can be :central or :forward.\n\nnote: Note\nThis algorithm is only available if LeastSquaresOptim.jl is installed.\n\n\n\n\n\n","category":"type"},{"location":"solvers/steady_state_solvers/#ss_solvers","page":"Steady State Solvers","title":"Steady State Solvers","text":"","category":"section"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"solve(prob::SteadyStateProblem, alg; kwargs)","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"Solves for the steady states in the problem defined by prob using the algorithm alg. If no algorithm is given, a default algorithm will be chosen.","category":"page"},{"location":"solvers/steady_state_solvers/#Recommended-Methods","page":"Steady State Solvers","title":"Recommended Methods","text":"","category":"section"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"Conversion to a NonlinearProblem is generally the fastest method. However, this will not guarantee the preferred root (the stable equilibrium), and thus if the preferred root is required, then it's recommended that one uses DynamicSS. For DynamicSS, often an adaptive stiff solver, like a Rosenbrock or BDF method (Rodas5 or QNDF), is a good way to allow for very large time steps as the steady state approaches.","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"The SteadyStateDiffEq.jl methods on a SteadyStateProblem respect the time definition in the nonlinear definition, i.e., u' = f(u, t) uses the correct values for t as the solution evolves. A conversion of a SteadyStateProblem to a NonlinearProblem replaces this with the nonlinear system u' = f(u, ∞), and thus the direct SteadyStateProblem approach can give different answers (i.e., the correct unique fixed point) on ODEs with non-autonomous dynamics.","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"If you have an unstable equilibrium and you want to solve for the unstable equilibrium, then DynamicSS will not converge to that equilibrium for any initial condition. However, Nonlinear Solvers don't suffer from this issue, and thus it's recommended to use a nonlinear solver if you want to solve for the unstable equilibrium.","category":"page"},{"location":"solvers/steady_state_solvers/#Full-List-of-Methods","page":"Steady State Solvers","title":"Full List of Methods","text":"","category":"section"},{"location":"solvers/steady_state_solvers/#Conversion-to-NonlinearProblem","page":"Steady State Solvers","title":"Conversion to NonlinearProblem","text":"","category":"section"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"Any SteadyStateProblem can be trivially converted to a NonlinearProblem via NonlinearProblem(prob::SteadyStateProblem). Using this approach, any of the solvers from the Nonlinear System Solvers page can be used. As a convenience, users can use:","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"SSRootfind: A wrapper around NonlinearSolve.jl compliant solvers which converts the SteadyStateProblem to a NonlinearProblem and solves it.","category":"page"},{"location":"solvers/steady_state_solvers/#SteadyStateDiffEq.jl","page":"Steady State Solvers","title":"SteadyStateDiffEq.jl","text":"","category":"section"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"SteadyStateDiffEq.jl uses ODE solvers to iteratively approach the steady state. It is a very stable method for solving nonlinear systems, though often computationally more expensive than direct methods.","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"DynamicSS : Uses an ODE solver to find the steady state. Automatically terminates when close to the steady state. DynamicSS(alg; tspan = Inf) requires that an ODE algorithm is given as the first argument. The absolute and relative tolerances specify the termination conditions on the derivative's closeness to zero. This internally uses the TerminateSteadyState callback from the Callback Library. The simulated time, for which the ODE is solved, can be limited by tspan.  If tspan is a number, it is equivalent to passing (zero(tspan), tspan).","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"Example usage:","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"using NonlinearSolve, SteadyStateDiffEq, OrdinaryDiffEq\nsol = solve(prob, DynamicSS(Tsit5()))\n\nusing Sundials\nsol = solve(prob, DynamicSS(CVODE_BDF()), dt = 1.0)","category":"page"},{"location":"solvers/steady_state_solvers/","page":"Steady State Solvers","title":"Steady State Solvers","text":"note: Note\nIf you use CVODE_BDF you may need to give a starting dt via dt=.....","category":"page"},{"location":"tutorials/small_compile/#fast_startup","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"","category":"section"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"In many instances one may want a very lightweight version of NonlinearSolve.jl. For this case there exists the solver package SimpleNonlinearSolve.jl. SimpleNonlinearSolve.jl solvers all satisfy the same interface as NonlinearSolve.jl, but they are designed to be simpler, lightweight, and thus have a faster startup time. Everything that can be done with NonlinearSolve.jl can be done with SimpleNonlinearSolve.jl. Thus for example, we can solve the core tutorial problem with just SimpleNonlinearSolve.jl as follows:","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"using SimpleNonlinearSolve\n\nf(u, p) = u .* u .- p\nu0 = [1.0, 1.0]\np = 2.0\nprob = NonlinearProblem(f, u0, p)\nsol = solve(prob, SimpleNewtonRaphson())","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"However, there are a few downsides to SimpleNonlinearSolve's SimpleX style algorithms to note:","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"SimpleNonlinearSolve.jl's methods are not hooked into the LinearSolve.jl system, and thus do not have the ability to specify linear solvers, use sparse matrices, preconditioners, and all of the other features which are required to scale for very large systems of equations.\nSimpleNonlinearSolve.jl's methods have less robust error handling and termination conditions, and thus these methods are missing some flexibility and give worse hints for debugging. Note that these can be enabled but are disabled by default.","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"However, the major upsides of SimpleNonlinearSolve.jl are:","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"The methods are optimized and non-allocating on StaticArrays\nThe methods are minimal in compilation","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"As such, you can use the code as shown above to have very low startup with good methods, but for more scaling and debuggability we recommend the full NonlinearSolve.jl. But that said,","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"using StaticArrays\n\nu0 = SA[1.0, 1.0]\np = 2.0\nprob = NonlinearProblem(f, u0, p)\nsol = solve(prob, SimpleNewtonRaphson())","category":"page"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"using StaticArrays.jl is also the fastest form for small equations, so if you know your system is small then SimpleNonlinearSolve.jl is not only sufficient but optimal.","category":"page"},{"location":"tutorials/small_compile/#Static-Compilation","page":"Faster Startup and and Static Compilation","title":"Static Compilation","text":"","category":"section"},{"location":"tutorials/small_compile/","page":"Faster Startup and and Static Compilation","title":"Faster Startup and and Static Compilation","text":"Julia has tools for building small binaries via static compilation with StaticCompiler.jl. However, these tools are currently limited to type-stable non-allocating functions. That said, SimpleNonlinearSolve.jl's solvers are precisely the subset of NonlinearSolve.jl which are compatible with static compilation.","category":"page"},{"location":"devdocs/jacobian/#Jacobian-Wrappers","page":"Jacobian Wrappers","title":"Jacobian Wrappers","text":"","category":"section"},{"location":"devdocs/jacobian/","page":"Jacobian Wrappers","title":"Jacobian Wrappers","text":"NonlinearSolve.AbstractNonlinearSolveJacobianCache\nNonlinearSolve.JacobianCache","category":"page"},{"location":"devdocs/jacobian/#NonlinearSolve.AbstractNonlinearSolveJacobianCache","page":"Jacobian Wrappers","title":"NonlinearSolve.AbstractNonlinearSolveJacobianCache","text":"AbstractNonlinearSolveJacobianCache{iip} <: Function\n\nAbstract Type for all Jacobian Caches used in NonlinearSolve.jl.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/jacobian/#NonlinearSolve.JacobianCache","page":"Jacobian Wrappers","title":"NonlinearSolve.JacobianCache","text":"JacobianCache(prob, alg, f::F, fu, u, p; autodiff = nothing,\n    vjp_autodiff = nothing, jvp_autodiff = nothing, linsolve = missing) where {F}\n\nConstruct a cache for the Jacobian of f w.r.t. u.\n\nArguments\n\nprob: A NonlinearProblem or a NonlinearLeastSquaresProblem.\nalg: A AbstractNonlinearSolveAlgorithm. Used to check for concrete_jac.\nf: The function to compute the Jacobian of.\nfu: The evaluation of f(u, p) or f(_, u, p). Used to determine the size of the result cache and Jacobian.\nu: The current value of the state.\np: The current value of the parameters.\n\nKeyword Arguments\n\nautodiff: Automatic Differentiation or Finite Differencing backend for computing the jacobian. By default, selects a backend based on sparsity parameters, type of state, function properties, etc.\nvjp_autodiff: Automatic Differentiation or Finite Differencing backend for computing the vector-Jacobian product.\njvp_autodiff: Automatic Differentiation or Finite Differencing backend for computing the Jacobian-vector product.\nlinsolve: Linear Solver Algorithm used to determine if we need a concrete jacobian or if possible we can just use a SciMLJacobianOperators.JacobianOperator instead.\n\n\n\n\n\n","category":"type"},{"location":"api/sundials/#Sundials.jl","page":"Sundials.jl","title":"Sundials.jl","text":"","category":"section"},{"location":"api/sundials/","page":"Sundials.jl","title":"Sundials.jl","text":"This is a wrapper package for importing solvers from Sundials into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/sundials/","page":"Sundials.jl","title":"Sundials.jl","text":"using Pkg\nPkg.add(\"Sundials\")\nusing Sundials","category":"page"},{"location":"api/sundials/","page":"Sundials.jl","title":"Sundials.jl","text":"These methods can be used independently of the rest of NonlinearSolve.jl.","category":"page"},{"location":"api/sundials/#Solver-API","page":"Sundials.jl","title":"Solver API","text":"","category":"section"},{"location":"api/sundials/","page":"Sundials.jl","title":"Sundials.jl","text":"KINSOL","category":"page"},{"location":"api/sundials/#Sundials.KINSOL","page":"Sundials.jl","title":"Sundials.KINSOL","text":"KINSOL: Newton-Krylov technique solver\n\nKINSOL(;\n    linear_solver = :Dense,\n    jac_upper = 0,\n    jac_lower = 0,\n    userdata = nothing,\n    prec_side = 0,\n    krylov_dim = 0,\n    globalization_strategy = :None\n)\n\nThe choices for the linear solver are:\n\n:Dense: A dense linear solver\n:Band: A solver specialized for banded Jacobians. If used, you must set the position of the upper and lower non-zero diagonals via jac_upper and jac_lower.\n:LapackDense: A version of the dense linear solver that uses the Julia-provided OpenBLAS-linked LAPACK for multithreaded operations. This will be faster than :Dense on larger systems but has noticeable overhead on smaller (<100 ODE) systems.\n:LapackBand: A version of the banded linear solver that uses the Julia-provided OpenBLAS-linked LAPACK for multithreaded operations. This will be faster than :Band on larger systems but has noticeable overhead on smaller (<100 ODE) systems.\n:GMRES: A GMRES method. Recommended first choice Krylov method.\n:BCG: A biconjugate gradient method\n:PCG: A preconditioned conjugate gradient method. Only for symmetric linear systems.\n:TFQMR: A TFQMR method.\n:KLU: A sparse factorization method. Requires that the user specify a Jacobian. The Jacobian must be set as a sparse matrix in the ODEProblem type.\n\nThe choices for globalization strategy are:\n\n:None: No globalization strategy\n:LineSearch: A line search globalization strategy\n\n\n\n\n\n","category":"type"},{"location":"tutorials/optimizing_parameterized_ode/#optimizing-parameterized-ode","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"","category":"section"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"Let us fit a parameterized ODE to some data. We will use the Lotka-Volterra model as an example. We will use Single Shooting to fit the parameters.","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"using OrdinaryDiffEqTsit5, NonlinearSolve, Plots","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"Let us simulate some real data from the Lotka-Volterra model.","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"function lotka_volterra!(du, u, p, t)\n    x, y = u\n    α, β, δ, γ = p\n    du[1] = dx = α * x - β * x * y\n    du[2] = dy = -δ * y + γ * x * y\nend\n\n# Initial condition\nu0 = [1.0, 1.0]\n\n# Simulation interval and intermediary points\ntspan = (0.0, 2.0)\ntsteps = 0.0:0.1:10.0\n\n# LV equation parameter. p = [α, β, δ, γ]\np = [1.5, 1.0, 3.0, 1.0]\n\n# Setup the ODE problem, then solve\nprob = ODEProblem(lotka_volterra!, u0, tspan, p)\nsol = solve(prob, Tsit5(); saveat = tsteps)\n\n# Plot the solution\nusing Plots\nplot(sol; linewidth = 3)","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"Let us now formulate the parameter estimation as a Nonlinear Least Squares Problem.","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"function loss_function(ode_param, data)\n    sol = solve(prob, Tsit5(); p = ode_param, saveat = tsteps)\n    return vec(reduce(hcat, sol.u)) .- data\nend\n\np_init = zeros(4)\n\nnlls_prob = NonlinearLeastSquaresProblem(loss_function, p_init, vec(reduce(hcat, sol.u)))","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"Now, we can use any NLLS solver to solve this problem.","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"res = solve(nlls_prob, LevenbergMarquardt(); maxiters = 1000, show_trace = Val(true),\n    trace_level = TraceWithJacobianConditionNumber(25))\nnothing # hide","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"res","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"We can also use Trust Region methods.","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"res = solve(nlls_prob, TrustRegion(); maxiters = 1000, show_trace = Val(true),\n    trace_level = TraceWithJacobianConditionNumber(25))\nnothing # hide","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"res","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"Let's plot the solution.","category":"page"},{"location":"tutorials/optimizing_parameterized_ode/","page":"Optimizing a Parameterized ODE","title":"Optimizing a Parameterized ODE","text":"prob2 = remake(prob; tspan = (0.0, 10.0))\nsol_fit = solve(prob2, Tsit5(); p = res.u)\nsol_true = solve(prob2, Tsit5(); p = p)\nplot(sol_true; linewidth = 3)\nplot!(sol_fit; linewidth = 3, linestyle = :dash)","category":"page"},{"location":"api/speedmapping/#SpeedMapping.jl","page":"SpeedMapping.jl","title":"SpeedMapping.jl","text":"","category":"section"},{"location":"api/speedmapping/","page":"SpeedMapping.jl","title":"SpeedMapping.jl","text":"This is a extension for importing solvers from SpeedMapping.jl into the SciML interface. Note that these solvers do not come by default, and thus one needs to install the package before using these solvers:","category":"page"},{"location":"api/speedmapping/","page":"SpeedMapping.jl","title":"SpeedMapping.jl","text":"using Pkg\nPkg.add(\"SpeedMapping\")\nusing SpeedMapping, NonlinearSolve","category":"page"},{"location":"api/speedmapping/#Solver-API","page":"SpeedMapping.jl","title":"Solver API","text":"","category":"section"},{"location":"api/speedmapping/","page":"SpeedMapping.jl","title":"SpeedMapping.jl","text":"SpeedMappingJL","category":"page"},{"location":"api/speedmapping/#NonlinearSolve.SpeedMappingJL","page":"SpeedMapping.jl","title":"NonlinearSolve.SpeedMappingJL","text":"SpeedMappingJL(; σ_min = 0.0, stabilize::Bool = false, check_obj::Bool = false,\n    orders::Vector{Int} = [3, 3, 2], time_limit::Real = 1000)\n\nWrapper over SpeedMapping.jl for solving Fixed Point Problems. We allow using this algorithm to solve root finding problems as well.\n\nKeyword Arguments\n\nσ_min: Setting to 1 may avoid stalling (see [13]).\nstabilize: performs a stabilization mapping before extrapolating. Setting to true may improve the performance for applications like accelerating the EM or MM algorithms (see [13]).\ncheck_obj: In case of NaN or Inf values, the algorithm restarts at the best past iterate.\norders: determines ACX's alternating order. Must be between 1 and 3 (where 1 means no extrapolation). The two recommended orders are [3, 2] and [3, 3, 2], the latter being potentially better for highly non-linear applications (see [13]).\ntime_limit: time limit for the algorithm.\n\nnote: Note\nThis algorithm is only available if SpeedMapping.jl is installed.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#termination_condition","page":"Termination Conditions","title":"Termination Conditions","text":"","category":"section"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"Provides a API to specify termination conditions for NonlinearProblem and SteadyStateProblem. For details on the various termination modes:","category":"page"},{"location":"basics/termination_condition/#Termination-Conditions","page":"Termination Conditions","title":"Termination Conditions","text":"","category":"section"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"The termination condition is constructed as:","category":"page"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"cache = init(du, u, AbsSafeBestTerminationMode(); abstol = 1e-9, reltol = 1e-9)","category":"page"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"If abstol and reltol are not supplied, then we choose a default based on the element types of du and u.","category":"page"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"We can query the cache using DiffEqBase.get_termination_mode, DiffEqBase.get_abstol and DiffEqBase.get_reltol.","category":"page"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"To test for termination simply call the cache:","category":"page"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"terminated = cache(du, u, uprev)","category":"page"},{"location":"basics/termination_condition/#Absolute-Tolerance","page":"Termination Conditions","title":"Absolute Tolerance","text":"","category":"section"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"AbsTerminationMode\nAbsNormTerminationMode\nAbsSafeTerminationMode\nAbsSafeBestTerminationMode","category":"page"},{"location":"basics/termination_condition/#DiffEqBase.AbsTerminationMode","page":"Termination Conditions","title":"DiffEqBase.AbsTerminationMode","text":"AbsTerminationMode <: AbstractNonlinearTerminationMode\n\nTerminates if all left(  Delta u  leq abstol right). .\n\nDelta u denotes the increment computed by the nonlinear solver and u denotes the solution.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#DiffEqBase.AbsNormTerminationMode","page":"Termination Conditions","title":"DiffEqBase.AbsNormTerminationMode","text":"AbsNormTerminationMode <: AbstractNonlinearTerminationMode\n\nTerminates if  Delta u  leq abstol. .\n\nDelta u denotes the increment computed by the inner nonlinear solver.\n\nConstructor\n\nAbsNormTerminationMode(internalnorm = nothing)\n\nwhere internalnorm is the norm to use for the termination condition. Special handling is done for norm(_, 2), norm(_, Inf), and maximum(abs, _).\n\nDefault is left as nothing, which allows upstream frameworks to choose the correct norm based on the problem type. If directly using the init API, a proper norm must be provided.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#DiffEqBase.AbsSafeTerminationMode","page":"Termination Conditions","title":"DiffEqBase.AbsSafeTerminationMode","text":"AbsSafeTerminationMode <: DiffEqBase.AbstractSafeNonlinearTerminationMode\n\nEssentially AbsNormTerminationMode + terminate if there has been no improvement for the last patience_steps + terminate if the solution blows up (diverges).\n\nConstructor\n\nAbsSafeTerminationMode(internalnorm = nothing; protective_threshold = nothing,\n    patience_steps = 100, patience_objective_multiplier = 3,\n    min_max_factor = 1.3, max_stalled_steps = nothing)\n\nwhere internalnorm is the norm to use for the termination condition. Special handling is done for norm(_, 2), norm(_, Inf), and maximum(abs, _).\n\nDefault is left as nothing, which allows upstream frameworks to choose the correct norm based on the problem type. If directly using the init API, a proper norm must be provided.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#DiffEqBase.AbsSafeBestTerminationMode","page":"Termination Conditions","title":"DiffEqBase.AbsSafeBestTerminationMode","text":"AbsSafeBestTerminationMode <: DiffEqBase.AbstractSafeBestNonlinearTerminationMode\n\nEssentially AbsSafeTerminationMode, but caches the bestsolution found so far.\n\nConstructor\n\nAbsSafeBestTerminationMode(internalnorm = nothing; protective_threshold = nothing,\n    patience_steps = 100, patience_objective_multiplier = 3,\n    min_max_factor = 1.3, max_stalled_steps = nothing)\n\nwhere internalnorm is the norm to use for the termination condition. Special handling is done for norm(_, 2), norm(_, Inf), and maximum(abs, _).\n\nDefault is left as nothing, which allows upstream frameworks to choose the correct norm based on the problem type. If directly using the init API, a proper norm must be provided.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#Relative-Tolerance","page":"Termination Conditions","title":"Relative Tolerance","text":"","category":"section"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"RelTerminationMode\nRelNormTerminationMode\nRelSafeTerminationMode\nRelSafeBestTerminationMode","category":"page"},{"location":"basics/termination_condition/#DiffEqBase.RelTerminationMode","page":"Termination Conditions","title":"DiffEqBase.RelTerminationMode","text":"RelTerminationMode <: AbstractNonlinearTerminationMode\n\nTerminates if all left( Delta u  leq reltol times  u  right). .\n\nDelta u denotes the increment computed by the nonlinear solver and u denotes the solution.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#DiffEqBase.RelNormTerminationMode","page":"Termination Conditions","title":"DiffEqBase.RelNormTerminationMode","text":"RelNormTerminationMode <: AbstractNonlinearTerminationMode\n\nTerminates if  Delta u  leq reltol times  Delta u + u . .\n\nDelta u denotes the increment computed by the inner nonlinear solver.\n\nConstructor\n\nRelNormTerminationMode(internalnorm = nothing)\n\nwhere internalnorm is the norm to use for the termination condition. Special handling is done for norm(_, 2), norm(_, Inf), and maximum(abs, _).\n\nDefault is left as nothing, which allows upstream frameworks to choose the correct norm based on the problem type. If directly using the init API, a proper norm must be provided.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#DiffEqBase.RelSafeTerminationMode","page":"Termination Conditions","title":"DiffEqBase.RelSafeTerminationMode","text":"RelSafeTerminationMode <: DiffEqBase.AbstractSafeNonlinearTerminationMode\n\nEssentially RelNormTerminationMode + terminate if there has been no improvement for the last patience_steps + terminate if the solution blows up (diverges).\n\nConstructor\n\nRelSafeTerminationMode(internalnorm = nothing; protective_threshold = nothing,\n    patience_steps = 100, patience_objective_multiplier = 3,\n    min_max_factor = 1.3, max_stalled_steps = nothing)\n\nwhere internalnorm is the norm to use for the termination condition. Special handling is done for norm(_, 2), norm(_, Inf), and maximum(abs, _).\n\nDefault is left as nothing, which allows upstream frameworks to choose the correct norm based on the problem type. If directly using the init API, a proper norm must be provided.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#DiffEqBase.RelSafeBestTerminationMode","page":"Termination Conditions","title":"DiffEqBase.RelSafeBestTerminationMode","text":"RelSafeBestTerminationMode <: DiffEqBase.AbstractSafeBestNonlinearTerminationMode\n\nEssentially RelSafeTerminationMode, but caches the bestsolution found so far.\n\nConstructor\n\nRelSafeBestTerminationMode(internalnorm = nothing; protective_threshold = nothing,\n    patience_steps = 100, patience_objective_multiplier = 3,\n    min_max_factor = 1.3, max_stalled_steps = nothing)\n\nwhere internalnorm is the norm to use for the termination condition. Special handling is done for norm(_, 2), norm(_, Inf), and maximum(abs, _).\n\nDefault is left as nothing, which allows upstream frameworks to choose the correct norm based on the problem type. If directly using the init API, a proper norm must be provided.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#Both-Absolute-and-Relative-Tolerance","page":"Termination Conditions","title":"Both Absolute and Relative Tolerance","text":"","category":"section"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"NormTerminationMode\nSteadyStateDiffEqTerminationMode","category":"page"},{"location":"basics/termination_condition/#DiffEqBase.NormTerminationMode","page":"Termination Conditions","title":"DiffEqBase.NormTerminationMode","text":"NormTerminationMode <: AbstractNonlinearTerminationMode\n\nTerminates if  Delta u  leq reltol times  Delta u + u  or  Delta u  leq abstol. .\n\nDelta u denotes the increment computed by the inner nonlinear solver.\n\nConstructor\n\nNormTerminationMode(internalnorm = nothing)\n\nwhere internalnorm is the norm to use for the termination condition. Special handling is done for norm(_, 2), norm(_, Inf), and maximum(abs, _).\n\nDefault is left as nothing, which allows upstream frameworks to choose the correct norm based on the problem type. If directly using the init API, a proper norm must be provided.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#DiffEqBase.SteadyStateDiffEqTerminationMode","page":"Termination Conditions","title":"DiffEqBase.SteadyStateDiffEqTerminationMode","text":"SteadyStateDiffEqTerminationMode <: AbstractNonlinearTerminationMode\n\nCheck if all values of the derivative is close to zero wrt both relative and absolute tolerance.\n\ndanger: Danger\nThis has been deprecated.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"The following was named to match an older version of SimpleNonlinearSolve. It is currently not used as a default anywhere.","category":"page"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"SimpleNonlinearSolveTerminationMode","category":"page"},{"location":"basics/termination_condition/#DiffEqBase.SimpleNonlinearSolveTerminationMode","page":"Termination Conditions","title":"DiffEqBase.SimpleNonlinearSolveTerminationMode","text":"SimpleNonlinearSolveTerminationMode <: AbstractNonlinearTerminationMode\n\nCheck if all values of the derivative is close to zero wrt both relative and absolute tolerance. Or check that the value of the current and previous state is within the specified tolerances.\n\ndanger: Danger\nThis has been deprecated.\n\n\n\n\n\n","category":"type"},{"location":"basics/termination_condition/#Return-Codes-(Deprecated)","page":"Termination Conditions","title":"Return Codes (Deprecated)","text":"","category":"section"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"These are deprecated and will be removed in a future release. Use the use_deprecated_retcodes = Val(false) option to SciMLBase.init to use the new return ReturnCode versions.","category":"page"},{"location":"basics/termination_condition/","page":"Termination Conditions","title":"Termination Conditions","text":"DiffEqBase.NonlinearSafeTerminationReturnCode\nDiffEqBase.NonlinearSafeTerminationReturnCode.Success\nDiffEqBase.NonlinearSafeTerminationReturnCode.Default\nDiffEqBase.NonlinearSafeTerminationReturnCode.Failure\nDiffEqBase.NonlinearSafeTerminationReturnCode.PatienceTermination\nDiffEqBase.NonlinearSafeTerminationReturnCode.ProtectiveTermination","category":"page"},{"location":"basics/termination_condition/#DiffEqBase.NonlinearSafeTerminationReturnCode","page":"Termination Conditions","title":"DiffEqBase.NonlinearSafeTerminationReturnCode","text":"NonlinearSafeTerminationReturnCode\n\nReturn Codes for the safe nonlinear termination conditions.\n\nThese return codes have been deprecated. Termination Conditions will return SciMLBase.Retcode.T starting from v7.\n\n\n\n\n\n","category":"module"},{"location":"basics/termination_condition/#DiffEqBase.NonlinearSafeTerminationReturnCode.Success","page":"Termination Conditions","title":"DiffEqBase.NonlinearSafeTerminationReturnCode.Success","text":"NonlinearSafeTerminationReturnCode.Success\n\nTermination Condition was satisfied!\n\n\n\n\n\n","category":"constant"},{"location":"basics/termination_condition/#DiffEqBase.NonlinearSafeTerminationReturnCode.Default","page":"Termination Conditions","title":"DiffEqBase.NonlinearSafeTerminationReturnCode.Default","text":"NonlinearSafeTerminationReturnCode.Default\n\nDefault Return Code. Used for type stability and conveys no additional information!\n\n\n\n\n\n","category":"constant"},{"location":"basics/termination_condition/#DiffEqBase.NonlinearSafeTerminationReturnCode.Failure","page":"Termination Conditions","title":"DiffEqBase.NonlinearSafeTerminationReturnCode.Failure","text":"NonlinearSafeTerminationReturnCode.Failure\n\nTermination Condition was not satisfied!\n\n\n\n\n\n","category":"constant"},{"location":"basics/termination_condition/#DiffEqBase.NonlinearSafeTerminationReturnCode.PatienceTermination","page":"Termination Conditions","title":"DiffEqBase.NonlinearSafeTerminationReturnCode.PatienceTermination","text":"NonlinearSafeTerminationReturnCode.PatienceTermination\n\nTerminate if there has been no improvement for the last patience_steps.\n\n\n\n\n\n","category":"constant"},{"location":"basics/termination_condition/#DiffEqBase.NonlinearSafeTerminationReturnCode.ProtectiveTermination","page":"Termination Conditions","title":"DiffEqBase.NonlinearSafeTerminationReturnCode.ProtectiveTermination","text":"NonlinearSafeTerminationReturnCode.ProtectiveTermination\n\nTerminate if the objective value increased by this factor wrt initial objective or the value diverged.\n\n\n\n\n\n","category":"constant"},{"location":"solvers/fixed_point_solvers/#Fixed-Point-Solvers","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"","category":"section"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"Currently we don't have an API to directly specify Fixed Point Solvers. However, a Fixed Point Problem can be trivially converted to a Root Finding Problem. Say we want to solve:","category":"page"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"f(u) = u","category":"page"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"This can be written as:","category":"page"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"g(u) = f(u) - u = 0","category":"page"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"g(u) = 0 is a root finding problem. Note that we can use any root finding algorithm to solve this problem. However, this is often not the most efficient way to solve a fixed point problem. We provide a few algorithms available via extensions that are more efficient for fixed point problems.","category":"page"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"Note that even if you use one of the Fixed Point Solvers mentioned here, you must still use the NonlinearProblem API to specify the problem, i.e., g(u) = 0.","category":"page"},{"location":"solvers/fixed_point_solvers/#Recommended-Methods","page":"Fixed Point Solvers","title":"Recommended Methods","text":"","category":"section"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"Using native NonlinearSolve.jl methods is the recommended approach. For systems where constructing Jacobian Matrices are expensive, we recommend using a Krylov Method with one of those solvers.","category":"page"},{"location":"solvers/fixed_point_solvers/#fixed_point_methods_full_list","page":"Fixed Point Solvers","title":"Full List of Methods","text":"","category":"section"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"We are only listing the methods that natively solve fixed point problems.","category":"page"},{"location":"solvers/fixed_point_solvers/#SpeedMapping.jl","page":"Fixed Point Solvers","title":"SpeedMapping.jl","text":"","category":"section"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"SpeedMappingJL(): accelerates the convergence of a mapping to a fixed point by the Alternating cyclic extrapolation algorithm (ACX).","category":"page"},{"location":"solvers/fixed_point_solvers/#FixedPointAcceleration.jl","page":"Fixed Point Solvers","title":"FixedPointAcceleration.jl","text":"","category":"section"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"FixedPointAccelerationJL(): accelerates the convergence of a mapping to a fixed point by the Anderson acceleration algorithm and a few other methods.","category":"page"},{"location":"solvers/fixed_point_solvers/#NLsolve.jl","page":"Fixed Point Solvers","title":"NLsolve.jl","text":"","category":"section"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"In our tests, we have found the anderson method implemented here to NOT be the most robust.","category":"page"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"NLsolveJL(; method = :anderson): Anderson acceleration for fixed point problems.","category":"page"},{"location":"solvers/fixed_point_solvers/#SIAMFANLEquations.jl","page":"Fixed Point Solvers","title":"SIAMFANLEquations.jl","text":"","category":"section"},{"location":"solvers/fixed_point_solvers/","page":"Fixed Point Solvers","title":"Fixed Point Solvers","text":"SIAMFANLEquationsJL(; method = :anderson): Anderson acceleration for fixed point problems.","category":"page"}]
}
